{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django REST API Framework","text":""},{"location":"02_work_with_models/","title":"Mavzu 2: Modellar bilan ishlash","text":""},{"location":"02_work_with_models/#reja","title":"Reja:","text":"<ol> <li>Bilim</li> <li>1.1 Terminlar</li> <li>1.2 O'qish uchun materiallar</li> <li>Amaliyot. O'qituvchi</li> <li>Amaliyot. O'quvchi</li> </ol>"},{"location":"02_work_with_models/#1-bilim","title":"1. Bilim","text":""},{"location":"02_work_with_models/#11-terminlar","title":"1.1 Terminlar","text":""},{"location":"02_work_with_models/#12-oqish-uchun-materiallar","title":"1.2 O'qish uchun materiallar","text":"<p>https://docs.djangoproject.com/en/4.0/topics/db/models/ https://docs.djangoproject.com/en/4.0/topics/db/models/</p>"},{"location":"02_work_with_models/#2-amaliyot-oqituvchi","title":"2. Amaliyot. O'qituvchi","text":"<p>Reja:</p> <ul> <li>2.1 CREATE - tuzish</li> <li>2.1.1 Profile modeli</li> <li>2.1.2 Project modeli</li> <li>2.1.3 Message modeli</li> <li>2.1.4 Skill modeli</li> <li>2.1.5 Review modeli</li> <li>2.1.6 Tag modeli</li> <li>2.1.7 Signallar</li> <li>2.1.8 Property</li> <li>2.2 Modellarni bog'lash</li> <li>2.2.1 Birga bir</li> <li>2.2.2 Birga ko'p</li> <li>2.2.3 Ko'pga ko'p</li> </ul>"},{"location":"02_work_with_models/#21-create-tuzish","title":"2.1 CREATE - tuzish","text":"<p>CREATE bu SQL so'rov tilida jadval tuzish uchun ishlatiladi. Djangoda esa bu modellar orqali amalga oshiriladi. Jadval tuzish uchun qadamlar:</p> <ol> <li>Ma'lumotlar ba'zasi strukturasini(sxemasi) ishlab chiqish</li> <li>Ma'lumotlar strukturasiga qarab model yozish</li> <li>Makemigration - SQL so'rovga o'xshash buyruqlarni hosil qiladi</li> <li>Migrate - uni ma'lumotlar ba'zasiga tadbiq qilish (M: jadval tuzish, CRUD amallarini bajarish)</li> </ol> <p>O'quvchilar portfoliosi modelini tuzamiz</p> <p>Saytda qanday imkoniyatlar bo'lishi kerak:</p> <ul> <li>O'quvchilar haqida ma'lumot olish</li> <li>O'quvchilar loyihasini, kodini ko'rish</li> <li>O'quvchiga habar jo'natish</li> <li>O'quvchilar ishiga izoh yozish va baho qo'yish</li> <li>Loyihalarni teg bo'yicha qidirish</li> <li>O'quvchilarning qo'shimcha malakalari haqida ma'lumot olish</li> <li>Har bir o'quvchini alohida o'zini sahifasi bo'lsin      Ko'rinishi (zip fayl): https://github.com/Oybeklinux/django-beginner/tree/master/resurslar      Yuqoridagi imkoniyatlarni hisobga olib, quyidagicha MB sxemasi hosil bo'ladi   </li> </ul> <p></p> <p>MB sxemasini ixtiyoriy online instrumentlardan biri yordamida yasaymiz:</p> <ul> <li>https://www.dbdesigner.net/</li> <li>https://sqldbm.com/Home/</li> <li>https://dbdiagram.io/home</li> </ul> <p>MB sxemasini qilib bo'lgach, yangi loyiha ochib, app qo'shib modellarni yozishni boshlaymiz </p> <ol> <li>Yangi loyiha ochish</li> </ol> <pre><code>django-admin startproject students_portfolio\ncd students_portfolio\npython manage.py startapp users\npython manage.py startapp projects\n</code></pre> <ol> <li>users va projects ni ro'yxatdan o'tkazamiz    Buning uchun students_portfolio papkasida settings.py fayliga INSTALLED_APPS ga ikkalasini qo'shib qo'yamiz</li> </ol> <pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'projects.apps.ProjectsConfig',\n    'users.apps.UsersConfig'\n]\n</code></pre> <ol> <li>Loyihani ishga tushiramiz</li> </ol> <pre><code>python manage.py runserver\n</code></pre> <p>Xatolik bo'lmasa davom etamiz</p> <ol> <li>Djangoda o'zini foydalanuvchiga bog'liq modellarini ishga tushiramiz.</li> </ol> <pre><code>python manage.py migrate\n</code></pre> <ol> <li>admin foydalanuvchi qo'shamiz</li> </ol> <pre><code>python manage.py createsuperuser\n</code></pre> <ol> <li>loyihani ishga tushirib, http://127.0.0.1:8000/admin/ urlga parol login bilan kiramiz. Natijada biz users va groups jadvalini ko'ramiz</li> </ol>"},{"location":"02_work_with_models/#211-profile-modeli","title":"2.1.1 Profile modeli","text":"<ol> <li>users/model.py ga kirib, profile modelini yozamiz</li> </ol> <pre><code>from django.db import models\n\n\n# Create your models here.\nclass Profile(models.Model):\n    bio = models.TextField(blank=False, null=True)\n    location = models.CharField(max_length=100)\n    profile_image = models.ImageField(upload_to='portfolio', blank=True, default='empty.png')\n    social_github = models.CharField(max_length=100)\n    social_telegram = models.CharField(max_length=100)\n    social_instagram = models.CharField(max_length=100)\n    social_youtube = models.CharField(max_length=100)\n    social_website = models.CharField(max_length=100)\n    created = models.DateField(auto_now=True)\n</code></pre> <p>Bu yerda:</p> <ul> <li>Profile foydalanuvchi haqidagi jadvalni modeli/class.</li> <li>CharField - uzunligi cheklangan matn uchun</li> <li>TextField - uzunligi cheklanmagan matn uchun</li> <li>DateField - Sana uchun</li> <li>ImageField - rasm uchun</li> </ul> <p>Parametrlar:</p> <ul> <li>auto_now_add - sanali toifa uchun ishlatiladi. Yozuv kiritilgan vaqtni belgilaydi</li> <li>auto_now - sanali toifa uchun ishlatiladi. Yozuv o'zgargan vaqtni belgilaydi.</li> <li>blank - hamma toifa uchun ishlatiladi. Maydonni to'ldirish majburiy yoki majburiy emasligini tekshiradi. Agar True bo'lsa, to'ldirish majburiy emas, aks holda majburiy bo'ladi</li> <li>null - hamma toifa uchun ishlatiladi. MBda ushbu maydon Null bo'lishligiga tekshiradi. Agar True bo'lsa Null bo'lishi mumkin</li> <li> <p>max_length - uzunligini bildiradi. CharField toifasida bu parametrni yozish majburiy</p> </li> <li> <p>Modelni jadvalga aylantiramiz</p> </li> </ul> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre> <p>Bu yerda: </p> <ul> <li>makemigrations - Modelni o'qib ilovada migrations katalogida har bir buyruq uhcun alohida faylda (kemta-ket) kod generatsiya qiladi. Keyinchalik uni ishga tushirish uchun</li> <li> <p>migrate - makemigrations dan hosil bo'lgan kodni ishga tushirib, MBga ta'sir o'tkazadi, ya'ni o'zgartiradi</p> </li> <li> <p>Loyihani ishga tushirib, admin panel dan ko'ring. Jadval ko'rinmaydi. Ko'rinishi uchun admin.py fayliga quyidagini yozamiz</p> </li> </ul> <pre><code>from django.contrib import admin\nfrom .models import Profile\n\n# Admin panelda Profile ni ko'rish uchun\nadmin.site.register(Profile)\n</code></pre> <p>Admin paneldan Profile ga ma'lumot qo'shamiz. So'ng rasm qayerga yuklanganligiga ahamiyat bering, u loyiha katalogida portfolio katalogini hosil qilib, hamma rasmlarni usha yerga yuklaydi. Agar bu yo'lni o'zgartirmochi bo'lsak, unda keyingi qadamni amalga oshiring</p> <ol> <li>Rasm, video, fayllarni yuklash yo'lini o'zgartiring. Buning uchun settings.py faylida MEDIA_ROOT o'zgaruvchisiga sizga kerakli yo'lni ko'rsating     </li> </ol> <p>Har hil qiymat berib ko'ring:</p> <ul> <li>MEDIA_ROOT = \"\". Buni yozmasangiz ham shunday bo'ladi, ya'ni default shunday. Bu holda to'g'ridan to'g'ri ilova katalogini ko'rsatgan bo'lasiz</li> <li>MEDIA_ROOT = '/media/'. Bu holda C:/media/ ni ko'rsatgan bo'lasiz</li> <li> <p>MEDIA_ROOT = os.path.join(BASE_DIR, 'media'). BASE_DIR - ilova katalogi yo'li. os.path.join yo'l yasab beradigan funksiya. Shunday qilib ilovasa media katalogini hosil qilib, yuklanadigan fayllar usha yerga tushadi</p> </li> <li> <p>Ma'lumotlarni qaysi birini to'ldirish shart yoki shart emasligini modelning tegishli hususiyatiga blank=True/False qiymatlarini berib, ishlatib tushunib oling. Djando admin panelda majburiy bo'lsa nomi qalin qilib yozilgan bo'ladi.</p> </li> <li> <p>Admin panelda maydonlar avtomat biron qiymatni olishi uchun modelning tegishli hususiyatiga default=qiymat bering.          Kiritilgan ma'lumotlarni ko'ra olasiz, faqat fayllarni hususan rasmni ko'rmoqchi bo'lsangiz quyidagicha habar chiqadi</p> </li> </ul> <p></p> <ol> <li>Rasmni url orqali ochish uchun settings.py ga MEDIA_URL = \"\" o'zgaruvchisini yozamiz</li> </ol> <pre><code>MEDIA_URL = \"\"\n</code></pre> <p>So'ng bu yo'lni urls.py ga ko'rsatib qo'yishimiz kerak, aks holda ochmaydi</p> <pre><code>from django.contrib import admin\nfrom django.urls import path\nfrom django.conf.urls.static import static\nfrom django.conf import settings\n\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n# rasm, fayl, videolarni url orqali ochish uchun\nurlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code></pre> <p>Ishga tushirib rasmlarni ochib ko'ring. MEDIA_URL ni o'zgartirib ko'ring, yana ishga tushirib, rasmlarni oching ba urlga ahamiyat bering. Nima o'zgardi?</p> <ol> <li>Ushbu Profile modeliga video(eng yaxshi ko'rgan kino), audio (eng yaxshi ko'rgan musiqasi), file(rezyumesi) ni quyidagicha qo'shing:</li> </ol> <pre><code>file = models.FileField(upload_to='files')\nvideo = models.FileField(upload_to='videos')\naudio = models.FileField(upload_to='audios')\n</code></pre> <p>So'ng uni tadbiq qiling:</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre> <p>Sizda quyidagicha xatolik beradi:</p> <p></p> <p>Sababi sizda ma'lumot kiritilgan, siz portfolio jadvaliga yangi ustun qo'shmoqchisiz, lekin kiritilib bo'lingan foydalnuvchilarning video, audio va file qiymati nima bo'ladi? Buni biz modelda belgilamasak, unda bu majburiy bo'ladi va ularga oldindan qiymat berishimiz kerak bo'ladi. Uning ikkita yo'lini ko'ramiz  1-holat. Har biriga null=True beramiz, ya'ni ular MBda null bo'lishi mumkin degani</p> <pre><code>file = models.FileField(upload_to='files', null=True)\nvideo = models.FileField(upload_to='videos', null=True)\naudio = models.FileField(upload_to='audios', null=True)\n</code></pre> <p>Ikkinchi holatni ko'rishdan avval oldingi holatni bekor qilamiz. Uning uchun file, video, audio qatorlarini comment qilib, makemigrations, mirate buyruqlarini amalga oshiramiz:</p> <pre><code>file = models.FileField(upload_to='files')\nvideo = models.FileField(upload_to='videos')\naudio = models.FileField(upload_to='audios')\n</code></pre> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre> <p>2-holat. Har biriga default=qiymat beramiz Hozirgi holatda har biriga default=faly ni ko'rsatish, mantiqan xato, lekin kodni tuhsunish uchun qilib ko'ramiz. Mantiqan buni rasm uchun qilish to'g'ri bo'ladi.</p> <pre><code>file = models.FileField(upload_to='files', default='files/default.docx')\nvideo = models.FileField(upload_to='videos', default='videos/default.avi')\naudio = models.FileField(upload_to='audios', default='audios/default.mp3')\n</code></pre> <p>Bu 3 fayl berilgan yo'lda albatta bo'lishi shart, yo'q bo'lgan faylni ko'rsatib qo'ymang  Har gal model o'zgarganda esdan chiqmasin makemigrations va migrate buyruqlarini ishga tushiramiz.</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre> <p>Endi ma'lumotlar kiriting. Fayllar qayerga yuklanayotganiga ahamiyat bering. Va yana video, file va audio ni bo'sh qoldiring, keyin esa uni ochib tekshiring.</p> <ol> <li>E'tibor bering, audio, video, file ga hohlagan fayllarni berishingiz mumkin, endi uni cheklaymiz. Faraz qilamiz rezyumeni ['.pdf', '.doc', '.docx'] formatlarda yuklash kerak. Bu kengaytmalarni tekshiradigan qo'shimcha funksiya yozamiz (validate_file_extension):          So'ng shu faylning o'zida bu funksiyani Profile modelining file hususiyatiga validators parametriga ko'rsatib qo'yamiz     </li> </ol> <p>models.py</p> <pre><code>def validate_file_extension(value):\n    \"\"\"\n    Agar fayl kengaytmasi berilganlarning orasida bo'lmasa, xatolik beradi\n    \"\"\"\n    # [0]  yo'li + fayl nomi\n    # [1] fayl kengaytmasi,: .docx, .jpg\n    ext = os.path.splitext(value.name)[1]\n    valid_extensions = ['.pdf', '.doc', '.docx']\n    if not ext.lower() in valid_extensions:\n        raise ValidationError('Unsupported file extension.')\n\nclass Profile(models.Model):\n    bio = models.TextField(blank=True, null=True)\n    location = models.CharField(max_length=100, blank=False, null=False)\n    profile_image = models.ImageField(upload_to='portfolio')\n    social_github = models.CharField(max_length=100, blank=False, null=True)\n    social_telegram = models.CharField(max_length=100, blank=True, null=False)\n    social_instagram = models.CharField(max_length=100, default=\"instagram\")\n    social_youtube = models.CharField(max_length=100)\n    social_website = models.CharField(max_length=100)\n    created = models.DateField(auto_now_add=True)\n    file = models.FileField(upload_to='files', default='files/default.xlsx', validators=[validate_file_extension])\n    video = models.FileField(upload_to='videos')\n    audio = models.FileField(upload_to='audios')\n</code></pre> <p>Kodni yozib bo'lgach ishga tushiramiz. file ga xato fayl kiritamiz, natija quyidagicha bo'ladi:</p> <p></p> <p>*Vazifa:</p> <ol> <li>Huddi shunday funksiyani video va mp3 larga yozib chiqing</li> <li> <p>Bir nechta ma'lumot kiriting:</p> </li> <li> <p>Django admin paneli yordamida</p> </li> <li>DB Browser yordamida</li> <li>Exceldagi ma'lumotni csv formotda saqlab, DB Browserdan import qiling</li> </ol>"},{"location":"02_work_with_models/#212-project-modeli","title":"2.1.2 Project modeli","text":"<p>Project jadvalida o'quvchilar qilgan loyiha haqida ma'lumotlar saqlanadi</p> <p></p> <p>User modeli Django modeli, Profile modelini tuzdik, endi Project modelini yozamiz</p> <p>Vazifa: 17. projects/models.py faylida Project modelini yozib, uni tadbiq qiling:</p> <pre><code>from django.db import models\n\n\nclass Project(models.Model):\n    title = models.CharField(max_length=100)  # Majburiy\n    description = models.TextField(blank=True, null=True)  # Majburiy emas\n    image = models.ImageField(upload_to='projects', default='projects/empty.png')\n    demo_link = models.CharField(max_length=200, blank=True, null=True)\n    source_code = models.CharField(max_length=200, blank=True, null=True)\n    vote_count = models.IntegerField(default=0)\n    vote_ratio = models.IntegerField(default=0)\n    created = models.DateField(auto_now_add=True)\n</code></pre> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre> <p>Bu yerda:</p> <ul> <li>IntegerField - butun sonlar uchun</li> </ul>"},{"location":"02_work_with_models/#213-message-modeli","title":"2.1.3 Message modeli","text":"<p>Message jadvalida o'quvchiga yuboriladigan habarlar saqlanadi </p> <ol> <li>projects/models.py faylida Message modelini yozib, uni tadbiq qiling:</li> </ol> <pre><code>from django.db import models\n\n\nclass Message(models.Model):\n    subject = models.CharField(max_length=100)\n    body = models.TextField()\n    created = models.DateField(auto_now_add=True)\n</code></pre> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"02_work_with_models/#214-skill-modeli","title":"2.1.4 Skill modeli","text":"<p>Skill jadvalida o'quvchilarning qo'shimcha malakasi haqida ma'lumotlari saqlanadi  19. projects/models.py faylida Skill modelini yozib, uni tadbiq qiling:</p> <pre><code>from django.db import models\n\n#  ...\n\nclass Skill(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    created = models.DateField(auto_now_add=True)\n</code></pre> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"02_work_with_models/#215-review-modeli","title":"2.1.5 Review modeli","text":"<p>Review jadvalida mijozlarning o'quvchining loyihasiga berilgan izohi va bahosi saqlanadi </p> <ol> <li>projects/models.py faylida Review modelini yozib, uni tadbiq qiling:</li> </ol> <pre><code>from django.db import models\n\n#  ...\n\nclass Review(models.Model):\n    body = models.TextField()\n    value = models.IntegerField(default=0)\n    created = models.DateField(auto_now_add=True)\n</code></pre> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"02_work_with_models/#216-tag-modeli","title":"2.1.6 Tag modeli","text":"<p>Tag jadvalida o'quvchining loyihasida nima texnologiyalar, qaysi dasturlash tillari, qaysi freymwork ishlatilganligi haqida teg (ma'lumotlar) saqlanadi </p> <ol> <li>projects/models.py faylida Tag modelini yozib, uni tadbiq qiling:</li> </ol> <pre><code>from django.db import models\n\n#  ...\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=100)\n    created = models.DateField(auto_now_add=True)\n</code></pre> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"02_work_with_models/#217-signallar","title":"2.1.7 Signallar","text":"<p>Signal bo'yicha hujjat Signal turlari  Videolar:</p> <ul> <li>Signal. Post save</li> <li>Signal. Post delete</li> <li>Signal. Receiver dekoratori</li> </ul> <p>Masala 1.Ro'yxatdan o'tgan foydalanuvchi user jadvaliga qo'shiladi. Bu foydalanuvchi avtomat Profile jadvaliga ham qo'shilsin. Masalani amalga oshirish uchun signallardan foydalanamiz. Chunki signallar orqali biz yangi yozuv kiritilganligi yoki o'chirilganligi yoki o'zgartirilganligi va boshqalarni bila olamiz  Endi user/models.py ga quyidagi signalni yozamiz.</p> <pre><code>from django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.db import models\n\nclass Profile(models.Model):\n    # ...\n\ndef create_profile(sender, instance, created, **kwargs):\n    user = instance\n    if created:\n        Profile.objects.create(\n            user=user\n        )\n\n\npost_save.connect(create_profile, sender=User)\n</code></pre> <p>Masala 2. Profile o'chirilganda mos bo'lgan User jadvalidagi foydalanuvchi o'chirilsin. Buning uchun post_delete dan foydalanamiz</p> <pre><code>from django.db.models.signals import post_save, post_delete\n\n\ndef delete_user(sender, instance, **kwargs):\n    user = instance.user\n    user.delete()\n\n\npost_delete.connect(delete_user, sender=Profile)\n</code></pre> <p>Yuqoridagi ikki masalani dekoratorlar bilan yozsak ham bo'ladi: </p> <pre><code>from django.db.models.signals import post_save, post_delete\nfrom django.dispatch import receiver\nfrom django.contrib.auth.models import User\nfrom django.db import models\n\n\nclass Profile(models.Model):\n\n    # ...\n\n@receiver(post_save, sender=User)\ndef create_profile(sender, instance, created, **kwargs):\n    user = instance\n    if created:\n        Profile.objects.create(\n            user=user\n        )\n\n\n@receiver(post_delete, sender=Profile)\ndef delete_user(sender, instance, **kwargs):\n    user = instance.user\n    user.delete()\n</code></pre>"},{"location":"02_work_with_models/#218-property","title":"2.1.8 Property","text":"<p>Masala. Foydalanuvchi loyihaga 'Yoqdi' yoki 'Yoqmadi' yugmasini bosganda dastur o'zi bazadagi vote_count va vote_ratio qiymatlarini hisoblab yangilab qo'ysin. Funksiya o'zi hisoblaydi, tashqaridan o'zgartirilmaydi, shuning uchun property dekoratoridan foydalansak bo'ladi</p> <pre><code>from django.db import models\nfrom users.models import Profile\n\n\nclass Project(models.Model):\n    # ...\n    @property\n    def update_vote_count(self):\n        reviews = self.review_set.all()\n        print(reviews)\n        upVotes = reviews.filter(value=1).count()\n        totalVotes = reviews.count()\n\n        ratio = (upVotes / totalVotes) * 100\n        self.vote_count = totalVotes\n        self.vote_ratio = ratio\n\n        self.save()\n</code></pre> <p>Foydalanuvchi har gal ovoz bergandan keyin bu hususiaytni chaqirsak, bazadagi vote_count va total_ratio ni yangilab qo'yadi</p>"},{"location":"02_work_with_models/#22-modellarni-boglash","title":"2.2 Modellarni bog'lash","text":"<p>Modellarimiz tayyor bo'ldi. Endi ularni MB sxemasiga qarab o'zaro bog'laymiz. Relatsion MBda quyidagicha bog'lash turlari mavjud:</p> <ul> <li>Birga bir</li> <li>Birga ko'p</li> <li>Ko'pga ko'p</li> </ul>"},{"location":"02_work_with_models/#221-birga-bir-boglash","title":"2.2.1 Birga bir bog'lash","text":"<p>Rasmga qaraymiz va birga bir bog'lanishlarni topamiz: U profil bilan user modelidir. Chunki bizning holatda bitta foydalnuvchiga bitta profil to'g'ri keladi</p> <ol> <li>Profile modelini Django ning User modeli bilan bog'laymiz:</li> </ol> <pre><code>from django.db import models\nfrom django.contrib.auth.models import User\n\n# ...\n\nclass Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True)\n    # ...\n</code></pre> <p>Bu yerda: on_delete - Primary Key joylashgan jadvaldan yozuv o'chganda Foreign Key joylashgan jadvaldagi yozuv nima bo'lishini bildiradi.</p> <ul> <li>models.CASCADE - Profile dagi usha foydalnuvchini o'chiradi.</li> <li>models.SET_NULL - Profile dagi user maydonini NULL qiymati bilan o'zgartirib qo'yadi. Bu holatda null=True ko'rsatilgan bo'lishi kerak</li> <li>models.SET_DEFAULT - Profile dagi user maydonini default qiymat bilan o'zgartirib qo'yadi. Bu holatda default ko'rsatilgan bo'lishi kerak</li> </ul> <p>Endi uni tadbiq qilamiz</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre> <p>Edni loyihani ishga tushirib, user jadvaliga bir nechta foydalanuvchi qo'shib, profile jadvalidan foydalanuvchini ko'rsatib saqlang. Shunda qaysi profil qaysi foydalanuvchiga tegishli ekanligi ma'lum bo'ladi</p>"},{"location":"02_work_with_models/#222-birga-kop","title":"2.2.2 Birga ko'p","text":"<ol> <li> <p>Rasmga qarab birga ko'p bog'lanishlarni topishga harakat qilamiz</p> </li> <li> <p>Project va Review</p> </li> <li>Profile va Message</li> <li>Profile va Skill</li> <li>Profile va Project</li> <li>Profile va Review</li> </ol> <p> Bularning orasida qanday bog'lanish bor? </p> <p>Har bitta bog'lanishni ko'rib chiqamiz: - Project va Review. Bitta loyihaga bir nechta izoh qoldirish mumkin  - Profile va Message. Bitta foydalanuvchiga bir nechta habar jo'natish mumkin.  - Profile va Skill.  Bitta foydalanuvchini bir nechta malakasi bo'lishi mumkin - Profile va Project. Bitta foydalanuvchini bir nechta loyihasi bo'lishi mumkin - Profile va Review. Bitta foydalanuvchi loyihaga/loyihalarga bir nechta izoh qoldirishi mumkin</p> <p>Endi har birini modelda yozib chiqamiz </p>"},{"location":"02_work_with_models/#project-va-review","title":"Project va Review","text":"<pre><code>from django.db import models\nfrom users.models import Profile\n\nclass Review(models.Model):\n    body = models.TextField()\n    value = models.IntegerField(default=0)\n    # Foreign key\n    project = models.ForeignKey(Project, on_delete=models.SET_NULL, null=True)\n</code></pre> <p>So'ng tadbiq qilamiz</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"02_work_with_models/#profile-va-message","title":"Profile va Message","text":"<pre><code>from django.db import models\nfrom users.models import Profile\n\n# ...\n\nclass Message(models.Model):\n    subject = models.CharField(max_length=100)\n    body = models.TextField()\n    created = models.DateField(auto_now_add=True)\n    sender = models.ForeignKey(Profile, on_delete=models.SET_NULL, null=True, related_name=\"sender_message\")\n    receiver = models.ForeignKey(Profile, on_delete=models.SET_NULL, null=True, related_name=\"receiver_message\")\n</code></pre> <p>Bu yerda related_name - bu nom bilan keyinchalik boshqa (Profile) jadvaldan tegishli ma'lumotlarni olish mumkin bo'ladi. Bizda Profile bilan bir paytda ikki bog'lanish bo'lgani uchun Django ularni farqlash uchun related_name ga farqli qiymat berishni talab qiladi. Shuning uchun ularga ikki hil nom berib yozib qo'ydik</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"02_work_with_models/#profile-va-skill","title":"Profile va Skill","text":"<pre><code>from django.db import models\nfrom users.models import Profile\n\n# ...\n\nclass Skill(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    created = models.DateField(auto_now_add=True)\n    # Foreign Key\n    user = models.ForeignKey(Profile, on_delete=models.SET_NULL, null=True)\n</code></pre> <p>So'ng tadbiq qilamiz</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"02_work_with_models/#profile-va-project","title":"Profile va Project","text":"<pre><code>from django.db import models\nfrom users.models import Profile\n\nclass Project(models.Model):\n    title = models.CharField(max_length=100)  # Majburiy\n    description = models.TextField(blank=True, null=True)  # Majburiy emas\n    image = models.ImageField(upload_to='projects', default='projects/empty.png')\n    demo_link = models.CharField(max_length=200, blank=True, null=True)\n    source_code = models.CharField(max_length=200, blank=True, null=True)\n    vote_count = models.IntegerField(default=0)\n    vote_ratio = models.IntegerField(default=0)\n    created = models.DateField(auto_now_add=True)\n    # Foreign Key\n    user = models.ForeignKey(Profile, on_delete=models.SET_NULL, null=True)\n</code></pre> <p>So'ng tadbiq qilamiz</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"02_work_with_models/#profile-va-review","title":"Profile va Review","text":"<pre><code>from django.db import models\nfrom users.models import Profile\n\nclass Review(models.Model):\n    body = models.TextField()\n    value = models.IntegerField(default=0)\n    # Foreign Key\n    user = models.ForeignKey(Profile, on_delete=models.SET_NULL, null=True)\n    # Foreign Key\n    user = models.ForeignKey(Profile, on_delete=models.SET_NULL, null=True)\n</code></pre> <p>So'ng tadbiq qilamiz</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"02_work_with_models/#223-kopga-kop","title":"2.2.3 Ko'pga ko'p","text":"<p>Rasmga qaraymiz. Ko'pga-ko'p bog'lanish qayerda bor? </p> <p>Project va Tag orasida ko'pga ko'p bog'lanish bor </p> <p></p> <p>Ya'ni bitta loyiha bir paytda bir nechta tegga tegishli bo'lishi mumkin (M: Django, React). O'z navbatida bitta teg bir nechta loyihaga tegishli bo'lishi mumkin. Masalan React frameworkda 4 ta loyiha bo'lishi mumkin. Mana shu ko'pga ko'p bog'lanishdir. Uni amalga oshirish SQLda qo'shimcha 3-jadval qo'shiladi. Django buni models.ManyToManyField toifasi yordamida o'zi amalga oshiradi.</p> <pre><code>from django.db import models\nfrom users.models import Profile\n\n\nclass Project(models.Model):\n    title = models.CharField(max_length=100)  # Majburiy\n    description = models.TextField(blank=True, null=True)  # Majburiy emas\n    image = models.ImageField(upload_to='projects', default='projects/empty.png')\n    demo_link = models.CharField(max_length=200, blank=True, null=True)\n    source_code = models.CharField(max_length=200, blank=True, null=True)\n    vote_count = models.IntegerField(default=0)\n    vote_ratio = models.IntegerField(default=0)\n    created = models.DateField(auto_now_add=True)\n    user = models.ForeignKey(Profile, on_delete=models.SET_NULL, null=True)\n    # Ko'pga ko'p bog'lanish\n    tag = models.ManyToManyField('Tag', blank=True, related_name=\"project_tag\")\n</code></pre> <p>So'ng tadbiq qilamiz</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre> <p>Endi loyihani ishga tushirib har bir jadvalga to'liq ma'lumot kiritib chiqamiz. Keyingi dars CRUD amallarini ko'ramiz</p>"},{"location":"02_work_with_models/#3-amaliyot-oquvchi","title":"3. Amaliyot. O'quvchi","text":"<p>Quyidagi loyihalarning MB sxemalarini, so'ng modellarini tuzing:</p> <ol> <li>Restoran sahifasi uchun saytlardan foydalanib MB sxemalasini tuzib, so'ng Djangoda loyiha ochib, ilova qo'shib, modellarini tuzing    Sayt</li> <li>Flakonlar sahifasi uchun mos ravishda MB sxemalasi, loyiha, ilova va modellarni tuzing    Sayt</li> <li>Fast food sahifasi uchun mos ravishda MB sxemalasi, loyiha, ilova va modellarni tuzing    Sayt</li> <li>O'quvchilarni bor/yo'q qilish sahifasi uchun quyidagi funksiyalarga qarab, o'zingiz o'ylab ko'ring qanday MB sxemalasi bo'ladi, loyiha, ilova va modellarni tuzing.    </li> </ol> <p>Funksiyalar:</p> <ul> <li>O'quvchilarni bor/yo'q deb belgi qo'yish</li> <li>Uyga vazifani bajardi/bajarmadi deb belgi qo'yish</li> <li>Har bir o'qituvchini o'zini alohida sahifasi bo'lsin</li> <li>O'qituvchi kirganda faqat o'zini guruhini ko'rsin</li> <li>Har darsni ohirida o'quvchilar ota-onasiga avtomat SMS habar jo'natilsin</li> </ul>"},{"location":"03_queryset_intro/","title":"Mavzu 3: QuerySet. Filtr va shartlar bilan ishlash","text":""},{"location":"03_queryset_intro/#reja","title":"Reja:","text":"<ol> <li>Bilim</li> <li>1.1 Terminlar</li> <li>1.2 O'qish uchun materiallar</li> <li>Amaliyot. O'qituvchi</li> <li>Amaliyot. O'quvchi</li> </ol>"},{"location":"03_queryset_intro/#1-bilim","title":"1. Bilim","text":""},{"location":"03_queryset_intro/#11-terminlar","title":"1.1 Terminlar","text":"<pre><code>tuple - o'zgarmas ro'yxat. s'ni boshida bir marta qiymat beriladi, keyin o'zgartirib bo'lmaydi\nelement - ro'yxat tarkibidagi har bir qiymat\nindeks - elementlarning ro'yxatdagi pozitsiyasi\n</code></pre>"},{"location":"03_queryset_intro/#12-oqish-uchun-materiallar","title":"1.2 O'qish uchun materiallar","text":"<ul> <li>w3schools - py tuples</li> <li>sariq dev - Ro'yxat bilan ishlash</li> </ul>"},{"location":"03_queryset_intro/#2-amaliyot-oqituvchi","title":"2. Amaliyot. O'qituvchi","text":"<p>Reja:</p> <ul> <li>[2.1 INSERT - kiritish]</li> <li>[2.2 SELECT - olish]</li> <li>[2.2.1 all]</li> <li>[2.2.2 get]</li> <li>[2.2.3 filter]</li> <li>2.2.4 exclude</li> <li>2.3 Shartlar</li> <li>[2.3.1 exact]</li> <li>[2.3.2 iexact]</li> <li>[2.3.3 contains]</li> <li>[2.3.4 icontains]</li> <li>[2.3.5 in]</li> <li>[2.3.6 gt]</li> <li>[2.3.7 gte]</li> <li>[2.3.8 lt]</li> <li>[2.3.9 lte]</li> <li>[2.3.10 startswith]</li> <li>[2.3.11 istartswith]</li> <li>[2.3.12 endswith]</li> <li>[2.3.13 iendswith]</li> <li>[2.3.14 range]</li> <li>[2.3.15 date]</li> <li>[2.3.16 year]</li> <li>[2.3.17 iso_year]</li> <li>[2.3.18 month]</li> <li>[2.3.19 day]</li> <li>[2.3.20 week]</li> <li>[2.3.21 week_day]</li> <li>[2.3.22 iso_week_day]</li> <li>[2.3.23 quarter]</li> <li>[2.3.24 time]</li> <li>[2.3.25 hour]</li> <li>[2.3.26 second]</li> <li>[2.3.27 isnull]</li> <li>[2.3.27 regex]</li> <li>[2.3.28 iregex]</li> <li>[2.4 UPDATE - o'zgartirish]</li> <li>[2.5 DELETE - o'chirish]</li> </ul>"},{"location":"03_queryset_intro/#str","title":"str","text":""},{"location":"03_queryset_intro/#profile","title":"Profile","text":"<pre><code>class Profile(models.Model):\n    ...\n    def __str__(self):\n      return f\"{self.user.last_name} {self.user.first_name}\"\n</code></pre>"},{"location":"03_queryset_intro/#project","title":"Project","text":"<pre><code>class Project(models.Model):\n    ...\n    def __str__(self):\n        return f\"{self.title}\"\n</code></pre>"},{"location":"03_queryset_intro/#message","title":"Message","text":"<pre><code>class Message(models.Model):\n    def __str__(self):\n        return f\"{self.subject}\"\n</code></pre>"},{"location":"03_queryset_intro/#skill","title":"Skill","text":"<pre><code>class Skill(models.Model):\n    ...\n    def __str__(self):\n        return f\"{self.name}\"\n</code></pre>"},{"location":"03_queryset_intro/#review","title":"Review","text":"<pre><code>class Review(models.Model):\n    ...\n    def __str__(self):\n        return f\"{self.body}\"\n</code></pre>"},{"location":"03_queryset_intro/#tag","title":"Tag","text":"<pre><code>class Tag(models.Model):\n    ...\n    def __str__(self):\n        return f\"{self.name}\"\n</code></pre>"},{"location":"03_queryset_intro/#211-insert-kiritish","title":"2.1.1 INSERT - kiritish","text":"<p>Ma'lumot kiritishning bir necha usulini ko'ramiz:</p> <ul> <li>Admin panel yordamida</li> <li>DB Browser yordamida</li> <li>Django konsolda yoki Django loyihasida</li> </ul> <p>Admin paneldan va DB browserda qanday qilib ma'lumot kiritish bo'yicha vazifalarni bajarasiz  So'ng python (Django konsolda yoki Django loyihasida) orqali qaday amalga oshirilishini ko'ramiz </p> <p>Vazifa</p> <ol> <li>Admin panel yordamida profile jadvalidagi tegga python va javascript teglarini qo'shing.</li> <li>Admin panel yordamida profile jadvalidagi teglarni, ya'ni pyton va javascripti Django va React ga o'zgartiring</li> <li>Admin panel yordamida Django va React teglarini o'chiring</li> <li>DB Browserdan siz qo'shgan yozuvni ochib ko'rsating</li> <li>Yuqoridagi ishlarni DB Browser Sqlite yordamida bajaring (Uyga)</li> </ol> <p>Avval Django admin paneldan ma'lumotlar tushunarli holda ko'rishi uchun str metodlarni yozib chiqamiz</p>"},{"location":"03_queryset_intro/#user","title":"User","text":"<p>Avval Django konsolini ochib olamiz:</p> <pre><code>python manage.py shell\n</code></pre> <ol> <li>User modeliga ma'lumot qo'shamiz</li> </ol> <pre><code>&gt;&gt;&gt; from django.contrib.auth.models import User\n&gt;&gt;&gt; asror = User.objects.create(username=\"Asror\", first_name=\"Asror\", last_name=\"Abduvosiqov\",password=\"12!@qwQW\")\n&gt;&gt;&gt; murod = User.objects.create(username=\"Murod\", first_name=\"Murod\", last_name=\"Kusherbayev\",password=\"12!@qwQW\")\n&gt;&gt;&gt; husniddin = User.objects.create(username=\"Husniddin\", first_name=\"Husniddin\", last_name=\"Muminov\",password=\"12!@qwQW\")\n&gt;&gt;&gt; User.objects.create(username=\"Diyor\", first_name=\"Diyor\", last_name=\"Malikov\",password=\"12!@qwQW\")\n&lt;User: Diyor&gt;\n&gt;&gt;&gt; User.objects.create(username=\"Jasur\", first_name=\"Jasur\",password=\"12!@qwQW\")\n&lt;User: Jasur&gt;\n&gt;&gt;&gt; User.objects.create(first_name=\"Otabek\")\n&gt;&gt;&gt; User.objects.create(first_name=\"Otabek\")\ndjango.db.utils.IntegrityError: UNIQUE constraint failed: auth_user.username\n</code></pre> <p>Ohirgi holatda xatolik beradi, chunki username ikkita foydaluvchida bir hil bo'lib qoladi, username UNIQUE (qaytarilmas) bo'lishi kerak</p>"},{"location":"03_queryset_intro/#profile_1","title":"Profile","text":"<ol> <li>Profile modeliga ma'lumot kiritamiz</li> </ol> <pre><code>&gt;&gt;&gt; from users.models import Profile\n&gt;&gt;&gt; asror_profile = Profile.objects.create(user=asror, bio=\"lorem ipsum\", location=\"Toshkent sh. Yunusobod t.\", profile_image=\"portfolio/Asror.png\", social_github=\"https://github.com/\", social_website=\"https://www.gazeta.uz/uz/\")\n&gt;&gt;&gt; murod_profile = Profile.objects.create(user=murod, bio=\"lorem ipsum\", location=\"Toshkent sh. Sergeli t.\", profile_image=\"portfolio/Murod.png\")\n&gt;&gt;&gt; diyor = User.objects.get(username='Diyor')\n&gt;&gt;&gt; Profile.objects.create(user=diyor, bio=\"lorem ipsum\", location=\"Toshkent sh. Mirzo Ulu'bek\", profile_image=\"portfolio/Diyor.png\")\n&gt;&gt;&gt; husniddin = User.objects.get(username='Husniddin')\n&gt;&gt;&gt; husniddin = User.objects.get(username='Husniddin')\ndjango.db.utils.IntegrityError: UNIQUE constraint failed: users_profile.user_id\n&gt;&gt;&gt; Profile.objects.create(user=husniddin, bio=\"lorem ipsum\", location=\"Toshkent v. Zagiota tumani\", profile_image=\"portfolio/default_profile.webp\", social_github=\"https://17husniddin.github.io/Potfolio/index.html\", social_instagram=\"https://www.instagram.com/husnidd1n_17/\")\n&gt;&gt;&gt; Profile.objects.create(bio=\"lorem ipsum\", location=\"Toshkent v. Zagiota tumani\")\nAttributeError: 'NoneType' object has no attribute 'last_name'\n</code></pre> <p>Ohirgi holatda xatolik beradi, sababi str metodida user.last_name ko'rsatilgan , bu holatda esa user=None, shuning uchun userni ko'rsatish kerak</p> <p>Vazifa Quyidagi Akbar, Sherzod, Bekzod, Eshmat, Toshmat, Jasur nomli foydalnuvchilar kiriting. Avval user ga so'ng, profile ga. Userga faqat username ni yozamiz. Profilega esa user va bioni yozamiz. Rasm o'rnida default qiymatni olsin </p> <p>Mijozlar:</p> <ul> <li>Akbar</li> <li>Eshmat</li> <li>Toshmat</li> <li>Jasur</li> <li>Bekzod</li> <li>Sherzod</li> </ul> <p>Bitiruvchi o'quvchilar:</p> <ul> <li>Asror</li> <li>Murod</li> <li>Husniddin</li> <li>Diyor</li> </ul>"},{"location":"03_queryset_intro/#message_1","title":"Message","text":"<p>Endi mijozlar o'quvchilarga habar qoldirishini ko'ramiz:</p> <pre><code>&gt;&gt;&gt; jasur_f = Profile.objects.get(user__username='Jasur')\n&gt;&gt;&gt; bekzod_f = Profile.objects.get(user__username='Bekzod')\n&gt;&gt;&gt; sherzod_f = Profile.objects.get(user__username='Sherzod')\n&gt;&gt;&gt; eshmat_f = Profile.objects.get(user__username='Eshmat')\n&gt;&gt;&gt; toshmat_f = Profile.objects.get(user__username='Toshmat')\n&gt;&gt;&gt; akbar_f = Profile.objects.get(user__username='Akbar')\n&gt;&gt;&gt; Message.objects.create(subject='Ish masalasida', body=\"Siz bilan gaplashsak bo'ladimi? Ishga taklif qilmoqchi edim\", sender=akbar_f, receiver=asror_f)\n&gt;&gt;&gt; Message.objects.create(subject='Ish masalasida', body=\"Siz bilan qanday bog'lansak bo'ladi\", sender=eshmat_f, receiver=diyor_f)\n&gt;&gt;&gt; Message.objects.create(subject='Ish masalasida', body=\"Yangi ish qidiryapsizmi\", sender=jasur_f, receiver=diyor_f)\n&gt;&gt;&gt; Message.objects.create(subject='Ish masalasida', body=\"Ingliz tili darajangiz qanday?\", sender=bekzod, receiver=husniddin_f)\n&gt;&gt;&gt; Message.objects.create(subject='Ish masalasida', body=\"Ingliz tili darajangiz qanday?\", sender=bekzod, receiver=murod_f)\n</code></pre> <p>Vazifa  Akbar, Asror va Husniddin habar yuboruvchi bo'lsin, Toshmat, Diyor va Murod qabul qiluvchi bo'lsin, shunda message ga 3 ta qator yozuv yoziladi</p>"},{"location":"03_queryset_intro/#skill_1","title":"Skill","text":"<p>Vazifa</p> <p>Bitiruvchilarga quyidagi malakalarni kiriting.</p> <ul> <li>Asror - 1. Python, 2. Django 3. Django Rest framework</li> <li>Murod - 1. Javascript 2. React</li> <li>Husniddin - 1. CSS,HTML 2. Python. 3. Django</li> <li>Diyor - 1. Javascript 2. React 3. NextJs</li> </ul>"},{"location":"03_queryset_intro/#project_1","title":"Project","text":"<p>Vazifa  loyihaga media/projects katalogiga ko'chiring.  So'ng bitiruvchilarga quyidagi loyihalarni va loyiha rasmi yo'li bilan nomini kiriting.</p> <ul> <li>Asror</li> <li>title=\"IT Academy online ta'lim\"</li> <li>image=\"projects/project-1.png\"</li> <li>vote_count=100</li> <li>vote_ratio=60</li> <li>description=\"lorem ipsum\"</li> <li> <p>Murod</p> </li> <li> <p>title=\"Kannas-textile\"</p> </li> <li>image=\"projects/project-5.png\"</li> <li>vote_count=50</li> <li>vote_ratio=90</li> <li> <p>description=\"lorem ipsum\"</p> </li> <li> <p>Husniddin</p> </li> <li> <p>title=\"Alimax pro\"</p> </li> <li>image=\"projects/project-6.png\"</li> <li>vote_count=300</li> <li>vote_ratio=90</li> <li> <p>description=\"lorem ipsum\"</p> </li> <li> <p>Diyor</p> </li> <li> <p>title=\"ePark.uz\"</p> </li> <li>image=\"projects/project-2.png\"</li> <li>vote_count=150</li> <li>vote_ratio=20</li> <li> <p>description=\"lorem ipsum\"</p> </li> <li> <p>title=\"\u0427\u0414 - \u0447\u0435 \u0434\u0443\u043c\u0430\u0435\u0448?\"</p> </li> <li>image=\"projects/project-3.png\"</li> <li>vote_count=200</li> <li>vote_ratio=10</li> <li> <p>description=\"lorem ipsum\"</p> </li> <li> <p>title=\"Dolina capital\"</p> </li> <li>image=\"projects/project-4.png\"</li> <li>vote_count=30</li> <li>vote_ratio=70</li> <li>description=\"lorem ipsum\"</li> </ul>"},{"location":"03_queryset_intro/#review_1","title":"Review","text":"<p>Vazifa Quyidagi ma'lumotlarni Review jadvaliga kiriting: </p>"},{"location":"03_queryset_intro/#tag_1","title":"Tag","text":"<p>Endi ko'pga ko'p bog'lanishda ma'lumot kiritishni ko'rib o'tamiz Avval taglarni kiritib olamiz</p> <pre><code>&gt;&gt;&gt; from projects.models import Tag\n&gt;&gt;&gt; py=Tag.objects.create(name='Python')\n&gt;&gt;&gt; re=Tag.objects.create(name='React')\n&gt;&gt;&gt; dj=Tag.objects.create(name='Django')\n&gt;&gt;&gt; drf=Tag.objects.create(name='Django Rest Framework')\n&gt;&gt;&gt; js=Tag.objects.create(name='Javascript')\n&gt;&gt;&gt; css=Tag.objects.create(name='CSS,HTML')\n</code></pre> <p>Endi esa teglarni loyiha obyektining tag hususiyatiga qo'shamiz. Avval loyihani id orqali qo'lga kiritamiz</p> <pre><code>&gt;&gt;&gt; from projects.models import Project\n&gt;&gt;&gt; for p in Project.objects.all():\n...    print(f\"{p.id} {p.title} {p.user}\")\n...\n1 IT Academy online ta'lim Asror\n2 ePark.uz Diyor\n3 \u0427\u0414 - \u0447\u0435 \u0434\u0443\u043c\u0430\u0435\u0448? Diyor\n4 Dolina capital Diyor\n5 Kannas-textile Murod\n6 Alimax pro Husniddin\n</code></pre> <p>Deylik \"IT Academy online ta'lim\" dasturi teglariga \"Python\" va \"Django Rest Framework\" ni yozmoqchimiz. Unda avval id=1 bo'lgan loyihani get() metodi bilan olishimiz kerak. Keyin teglarni add() metodi bilan qo'shamiz</p> <pre><code>&gt;&gt;&gt; pr1 = Project.objects.get(id=1)\n&gt;&gt;&gt; pr1.tag.add(py, drf)\n</code></pre> <p>id=1 loyiha qaysi teglarini ko'rmoqchi bo'lsak</p> <pre><code>&gt;&gt;&gt; pr1.tag.all()\n&lt;QuerySet [&lt;Tag: Python&gt;, &lt;Tag: Django Rest Framework&gt;]&gt;\n</code></pre> <p>Vazifa Huddi shunday qolgan loyihalarga quyidagi teglarni kiritib, so'ng tekshiring</p> <ul> <li>2 ePark.uz: React, Javascript</li> <li>3 \u0427\u0414 - \u0447\u0435 \u0434\u0443\u043c\u0430\u0435\u0448?: Python, Django, React, Javascript</li> <li>4 Dolina capital: Javascript, \"CSS,HTML\"</li> <li>5 Kannas-textile: React, Javascript, \"CSS,HTML\"</li> <li>6 Alimax pro: Javascript, \"CSS,HTML\"</li> </ul> <p>Endi bu bazani DB Browser dan ochib tahlil qiling. Tushunishga harakat qiling</p>"},{"location":"03_queryset_intro/#212-select-olish","title":"2.1.2 SELECT - olish","text":""},{"location":"03_queryset_intro/#21-all","title":"2.1 all","text":"<p>all() metodi hamma obyektni olish uchun ishlatiladi.  Masalan hamma teglarni ekranga chiqarish uchun all() metodidan foydalanamiz</p> <pre><code>from projects.models import Tag\nfor tag in Tag.objects.all():\n  print(f\"{tag.id} {tag.name}\")\n\n5 Python\n6 React\n7 Django\n8 Django Rest Framework\n9 Javascript\n10 CSS,HTML\n</code></pre> <p>Vazifa Hamma loyiha, profil, malaka, izoh, habarlarni ekranga chiqaring</p>"},{"location":"03_queryset_intro/#22-get","title":"2.2 get","text":"<p>Bitta obyektni qo'lga kiritish uchun get() metodi ishlatiladi. Parametrga shartini yozamiz. Shartlar murakkab bo'lishi mumkin, hozircha soddasini ko'rib turamiz</p> <p>id=1 bo'lgan loyihani chiqarish</p> <pre><code>&gt;&gt;&gt; from projects.models import Project\n&gt;&gt;&gt; Project.objects.get(id=1)\n&lt;Project: IT Academy online ta'lim&gt;\n</code></pre> <p>id=1 bo'lgan loyiha nechta ovoz to'plagan</p> <pre><code>&gt;&gt;&gt; from projects.models import Project\n&gt;&gt;&gt; pr=Project.objects.get(id=1)\n&gt;&gt;&gt; pr.vote_count\n100\n</code></pre> <p>Demak id=1 bo'lgan loyiha 100 ovoz to'plagan ekan</p> <p>Nomi 'ePark.uz' bo'lgan loyiha qaysi dasturlash tillarida va freymworklarda ishlatilgan?</p> <pre><code>&gt;&gt;&gt; from projects.models import Project\n&gt;&gt;&gt; pr=Project.objects.get(title='ePark.uz')\n&gt;&gt;&gt; pr.tag.all()\n&lt;QuerySet [&lt;Tag: React&gt;, &lt;Tag: Javascript&gt;]&gt;\n</code></pre> <p>Vazifa</p> <ol> <li>Nomi 'ePark.uz' bo'lgan loyihani qaysi dasturchi qilgan</li> <li>id=2 bo'lgan loyiha qancha ovoz to'plagan</li> <li>'Alimax pro' nomli loyiha demo linkini chiqaring</li> </ol>"},{"location":"03_queryset_intro/#23-filter","title":"2.3 filter","text":"<p>Agar natija bir nechta bo'lsa, unda filter metodini qo'llaymiz.</p> <p>100 ta ovoz olgan loyihalar ro'yxatini chiqaring</p> <pre><code>&gt;&gt;&gt; for pr in Project.objects.filter(vote_count=100):\n...    print(pr.title)\n...\nIT Academy online ta'lim\n</code></pre>"},{"location":"03_queryset_intro/#231-exact","title":"2.3.1 exact","text":"<p>exact sharti aynan berilgan qiymatga tengligini tekshiradi  Aynan Asrorni malakalarini chiqaring</p> <pre><code>&gt;&gt;&gt; Skill.objects.filter(user__exact=asror)\n&lt;QuerySet [&lt;Skill: Python&gt;, &lt;Skill: Django&gt;, &lt;Skill: Django Rest Framework&gt;]&gt;\n</code></pre> <p>Web sahifasi bo'lmagan dasturchilar ro'yxatini chiqaring:</p> <pre><code>&gt;&gt;&gt; [pr.user.username for pr in Profile.objects.filter(social_website__exact=None)]\n['Murod', 'Husniddin', 'Diyor', 'Akbar', 'Bekzod', 'Sherzod', 'Eshmat', 'Toshmat', 'Jasur']\n</code></pre> <p>Vazifa</p> <ol> <li>Video yuklamagan foydalanuvchilar ro'yxati</li> <li>Profil id=15 bo'lgan foydalanuvcilar ro'yxati</li> </ol>"},{"location":"03_queryset_intro/#232-iexact","title":"2.3.2 iexact","text":"<p>Qiymatni solishtirganda harflar kichik yoki kattaligiga ahamiyat bermaydi  Nomi 'asror' bo'lgan foydalanuvchini chiqarish kerak</p> <pre><code>&gt;&gt;&gt; [pr.username for pr in User.objects.filter(first_name='asror')]\n[]\n&gt;&gt;&gt; [pr.username for pr in User.objects.filter(first_name__exact='asror')]\n[]\n&gt;&gt;&gt; [pr.username for pr in User.objects.filter(first_name__iexact='asror')]\n['Asror']\n</code></pre> <p>Vazifa</p> <ol> <li>Nomi 'alimax pro' bo'lgan loyihani get() metodi bilan chiqaring</li> </ol>"},{"location":"03_queryset_intro/#233-contains","title":"2.3.3 contains","text":"<p>contains tarkibida bor yo'qligini tekshiradi  Ismida z harfi bor bo'lgan dasturchilar ro'yxatini chiqaring Avval hammasini ko'rib olamiz:</p> <pre><code>&gt;&gt;&gt; [user.username for user in User.objects.all()]\n['admin', 'Asror', 'Murod', 'Husniddin', 'Diyor', 'Jasur', '', 'Akbar', 'Bekzod', 'Sherzod', 'Eshmat', 'Toshmat']\n</code></pre> <p>Endi shart bilan chiqaramiz</p> <pre><code>&gt;&gt;&gt; [user.username for user in User.objects.filter(username__contains='z')]\n['Bekzod', 'Sherzod']\n</code></pre> <p>Vazifa</p> <ol> <li>Nomida '.' belgisi bor loyihalar ro'yxatini chiqaring</li> <li>Nomida 'IT' yozuvi bor loyihalar ro'yxatini chiqaring</li> </ol>"},{"location":"03_queryset_intro/#234-icontains","title":"2.3.4 icontains","text":"<p>icontains tarkibida bor yo'qligini tekshiradi, contain() metodidan farqi harf katta yoki kichikligini ahamiyati yo'q SQLite da contains va icontains bir hil ishlaydi</p>"},{"location":"03_queryset_intro/#235-in","title":"2.3.5 in","text":"<p>in sharti berilgan ro'yxatdan kamida bittasi mavjud ekanligini tekshiradi Python yoki Go ishlatilgan loyihalar ro'yxatini chiqaring</p> <pre><code>&gt;&gt;&gt; print(\"\\n\".join([pr.title for pr in Project.objects.filter(tag__name__in=['Python', 'Go'])]))\nIT Academy online ta'lim\n\u0427\u0414 - \u0447\u0435 \u0434\u0443\u043c\u0430\u0435\u0448?\n</code></pre> <p>Asror bilan Husniddin qilgan loyihalarni chiqaring</p> <pre><code>&gt;&gt;&gt; print(\"\\n\".join([pr.title for pr in Project.objects.filter(user__in=[asror, husniddin])]))\nIT Academy online ta'lim\nAlimax pro\n</code></pre> <p>Vazifa</p> <ol> <li>Ovozlar soni 100 yoki 200 yokii 300 ga teng bo'lgan loyiha nomlarini chiqaring</li> <li>Asror yoki Husniddin loyihalarga bergan fikrlarini, qaysi loyihaga fikr berganlari ro'yxatini chiqaring</li> </ol>"},{"location":"03_queryset_intro/#236-gt","title":"2.3.6 gt","text":""},{"location":"03_queryset_intro/#236-gte","title":"2.3.6 gte","text":""},{"location":"03_queryset_intro/#236-lt","title":"2.3.6 lt","text":""},{"location":"03_queryset_intro/#236-lte","title":"2.3.6 lte","text":"<p>gt,gte,lt,lte solishtirish uchun ishlatiladi. Ma'nolari:</p> <ul> <li>gt - katta</li> <li>gte - katta yoki teng</li> <li>lt - kichik</li> <li>lte - kichik yoki teng</li> </ul> <p>Ovozlar soni 100 dan katta bo'lgan loyihalarni, uni qilgan dasturchini chiqaring</p> <pre><code>&gt;&gt;&gt; [(pr.id, pr.user, pr.title) for pr in Project.objects.filter(vote_count__gt=100)]\n[(2, &lt;Profile: Diyor&gt;, 'ePark.uz'), (3, &lt;Profile: Diyor&gt;, '\u0427\u0414 - \u0447\u0435 \u0434\u0443\u043c\u0430\u0435\u0448?'), (6, &lt;Profile: Husniddin&gt;, 'Alimax pro')]\n</code></pre> <p>Tizimga 06.07.2022 sanada kirgan yoki undan avval qo'shilgan dasturchilarni chiqaring</p> <pre><code>[(pr.created, pr.user) for pr in Profile.objects.filter(created__lte=date(day=6,month=7,year=2022))]\n[(datetime.date(2022, 7, 6), &lt;User: Asror&gt;), (datetime.date(2022, 7, 6), &lt;User: Murod&gt;)]\n</code></pre> <p>Vazifa</p> <ol> <li>Ovozlar nisbati 50 dan katta bo'lgan loyihalarni nomini va uni qilgan dasturchi ismini chiqaring</li> <li>01.01.2022 dan 08.08.202 oraliqda ro'yxatdan o'tgan dasturchilarni chiqaring    Yoram uchun quyidagi linkka kiring</li> </ol>"},{"location":"03_queryset_intro/#2310-startswith","title":"2.3.10 startswith","text":""},{"location":"03_queryset_intro/#2311-istartswith","title":"2.3.11 istartswith","text":""},{"location":"03_queryset_intro/#2312-endswith","title":"2.3.12 endswith","text":""},{"location":"03_queryset_intro/#2313-iendswith","title":"2.3.13 iendswith","text":"<ul> <li>endswith - berilgan qiymat bilan tugashini tekshiradi</li> <li>iendswith - endswith bilan o'xashash, faqat harf katta kichikligini ahamiyati bo'lmaydi</li> <li>startswith - berilgan qiymat bilan boshlanishini tekshiradi</li> <li>istartswith - berilgan startswith bilan o'xashash, faqat harf katta kichikligini ahamiyati bo'lmaydi</li> </ul> <p>Ismi zod bilan tugaydigan foydalanuvchilarni chiqaring</p> <pre><code>&gt;&gt;&gt; User.objects.filter(username__endswith='zod')\n&lt;QuerySet [&lt;User: Bekzod&gt;, &lt;User: Sherzod&gt;]&gt;\n</code></pre> <p>Ismi a dan boshlanadigan foydalanuvchilarni chiqaring</p> <pre><code>&gt;&gt;&gt; User.objects.filter(username__startswith='a')\n&lt;QuerySet [&lt;User: admin&gt;, &lt;User: Asror&gt;, &lt;User: Akbar&gt;]&gt;\n</code></pre> <p>SQLite da startwith bilan istartswith bir hil ishlaydi</p> <p>Vazifa</p> <ol> <li>Nomi ka bilan boshlanadigan loyihalarni chiqaring</li> <li>Nomi .uz bilan tugaydigan loyihalarni chiqaring</li> <li>Rasmi .png bilan tugaydigan foydalanuvchilarni chiqaring</li> </ol>"},{"location":"03_queryset_intro/#2314-range","title":"2.3.14 range","text":"<p>range ikki qiymat orasida yotishini tekshiradi</p> <p>01.01.2022 dan 08.08.202 oraliqda ro'yxatdan o'tgan dasturchilarni chiqaring</p> <pre><code>&gt;&gt;&gt; [(pr.created, pr.user) for pr in Profile.objects.filter(created__range=(date(day=6,month=7,year=2022),date(day=6,mon\nth=7,year=2022)))]\n[(datetime.date(2022, 7, 6), &lt;User: Asror&gt;), (datetime.date(2022, 7, 6), &lt;User: Murod&gt;)]\n</code></pre> <p>Vazifa</p> <ol> <li>Ovozlar soni 100 bilan 500 oraliqda bo'lgan loyihalarni chiqaring</li> </ol>"},{"location":"03_queryset_intro/#2315-date","title":"2.3.15 date","text":""},{"location":"03_queryset_intro/#2316-year","title":"2.3.16 year","text":""},{"location":"03_queryset_intro/#2317-iso_year","title":"2.3.17 iso_year","text":""},{"location":"03_queryset_intro/#2318-month","title":"2.3.18 month","text":""},{"location":"03_queryset_intro/#2319-day","title":"2.3.19 day","text":""},{"location":"03_queryset_intro/#2320-week","title":"2.3.20 week","text":""},{"location":"03_queryset_intro/#2321-week_day","title":"2.3.21 week_day","text":""},{"location":"03_queryset_intro/#2322-iso_week_day","title":"2.3.22 iso_week_day","text":""},{"location":"03_queryset_intro/#2323-quarter","title":"2.3.23 quarter","text":"<p>Yuqoridagi shartlar sana bilan ishlaydi:</p> <ul> <li>date solishtirish uchun sanani olib beradi</li> <li>year solishtirish uchun yilni olib beradi</li> <li>month solishtirish uchun oyni olib beradi</li> <li>day solishtirish uchun kunni olib beradi</li> <li>week solishtirish uchun yildagi hafta tartibini (1-52/53) olib beradi</li> <li>week_day solishtirish uchun hafta kunini (1-yakshanba, 7-dushanba) olib beradi</li> <li>iso_week_day solishtirish uchun hafta kunini (1-dushanba,7-yakshanba) olib beradi</li> <li>quarter solishtirish uchun fasl tartibini olib beradi (1-4)</li> </ul> <p>Vazifa</p> <ol> <li>2022 yilda ro'yxatdan o'tgan foydalanuvchilarni chiqaring</li> <li>aprel oyida ro'yxatdan o'tgan foydalanuvchilarni chiqaring</li> <li>10 sanada ro'yxatdan o'tgan foydalanuvchilarni chiqaring</li> <li>sanasi 10gacha ro'yxatdan o'tgan foydalanuvchilarni chiqaring</li> </ol>"},{"location":"03_queryset_intro/#2324-time","title":"2.3.24 time","text":""},{"location":"03_queryset_intro/#2325-hour","title":"2.3.25 hour","text":""},{"location":"03_queryset_intro/#2326-second","title":"2.3.26 second","text":"<p>Yuqoridagi shartlar vaqt bilan ishlaydi.</p> <ul> <li>time solishtirish uchun vaqtni olib beradi</li> <li>hour solishtirish uchun soatni olib beradi</li> <li>minute solishtirish uchun daqiqani olib beradi</li> <li>second solishtirish uchun soniyani olib beradi</li> </ul> <p>Vazifa</p> <ol> <li>Bugun yuborilgan habarlarni chiqaring</li> <li>Soat 14 da yuborilgan habarlanri chiqaring</li> <li>Soat 9-12 oraliqda yuborilgan habarlarni chiqaring</li> <li>12.7.2022 sanada 9-12 oraliqda yuborilgan habarlarni chiqaring</li> </ol>"},{"location":"04_queryset_methods/","title":"Mavzu 4: QuerySet qaytaradigan metodlar","text":""},{"location":"04_queryset_methods/#reja","title":"Reja:","text":"<ol> <li>Bilim</li> <li>1.1 Terminlar</li> <li>1.2 O'qish uchun materiallar</li> <li>Amaliyot. O'qituvchi</li> <li>Amaliyot. O'quvchi</li> </ol>"},{"location":"04_queryset_methods/#1-bilim","title":"1. Bilim","text":""},{"location":"04_queryset_methods/#11-terminlar","title":"1.1 Terminlar","text":"<pre><code>tuple - o'zgarmas ro'yxat. s'ni boshida bir marta qiymat beriladi, keyin o'zgartirib bo'lmaydi\nelement - ro'yxat tarkibidagi har bir qiymat\nindeks - elementlarning ro'yxatdagi pozitsiyasi\n</code></pre>"},{"location":"04_queryset_methods/#2-amaliyot-oqituvchi","title":"2. Amaliyot. O'qituvchi","text":"<p>Reja:</p> <ul> <li>2.1 filter</li> <li>2.2 exclude</li> <li>2.3 annotate</li> <li>2.4 alias</li> <li>2.5 order_by</li> <li>2.6 reverse</li> <li>2.7 distinct</li> <li>2.8 values</li> <li>2.9 values_list</li> <li>2.10 dates</li> <li>2.11 datetime</li> <li>2.12 none</li> <li>2.13 all</li> <li>2.14 union</li> <li>2.15 intersection</li> <li>2.16 difference</li> <li>2.17 select_annotaterelated</li> </ul>"},{"location":"04_queryset_methods/#21-filter","title":"2.1 filter","text":"<ol> <li>Source kodi mavjud bo'lmagan loyihalarni ro'yxatini chiqaring    </li> </ol> <p>Agar hamma loyiha source kodi bo'lmasa, u holda, masalan, \"IT Academy online ta'lim\" loyihasining source kodiga qiymat beramiz. So'ng filterlaymiz</p> <pre><code>&gt;&gt;&gt; pr = Project.objects.get(title=\"IT Academy online ta'lim\")\n&gt;&gt;&gt; pr.source_code=\"https://github.com/Oybeklinux/portfolio_drf.git\"\n&gt;&gt;&gt; pr.save()\n&gt;&gt;&gt; Project.objects.filter(source_code=None)\n&lt;QuerySet [&lt;Project: ePark.uz&gt;, &lt;Project: \u0427\u0414 - \u0447\u0435 \u0434\u0443\u043c\u0430\u0435\u0448?&gt;, &lt;Project: Dolina capital&gt;, &lt;Project: Kannas-textile&gt;, &lt;Proje\nct: Alimax pro&gt;]&gt;\n</code></pre>"},{"location":"04_queryset_methods/#22-exclude","title":"2.2 exclude","text":"<ol> <li>Source kodi mavjud bo'lgan loyihalarni ro'yxatini chiqaring    </li> </ol> <pre><code>&gt;&gt;&gt; Project.objects.exclude(source_code=None)\n&lt;QuerySet [&lt;Project: IT Academy online ta'lim&gt;]&gt;\n</code></pre>"},{"location":"04_queryset_methods/#23-annotate","title":"2.3 annotate","text":"<p>Bir qanchasidan bitta qiymat chiqarib beradigan funksiyalar bor. Bular agregat funksiya deyiladi: max, min, count. annotate metodi shu funksiyalarni ishlatadi</p> <ol> <li>Har bir profilning nechtadan malakasi bor?</li> </ol> <pre><code>&gt;&gt;&gt; from django.db.models import Count, Max, Min\n&gt;&gt;&gt; [(s.user.username,s.total) for s in Profile.objects.annotate(total=Count('skill'))]\n[('Asror', 3), ('Murod', 2), ('Husniddin', 3), ('Diyor', 3), ('Jasur', 0), ('Akbar', 0), ('Bekzod', 0), ('Sherzod', 0),\n('Eshmat', 0), ('Toshmat', 0)]\n</code></pre> <ol> <li>Har bir profilning yuborgan habarlar soni (Avval message jadvalini to'ldirib olamiz)</li> </ol> <pre><code>&gt;&gt;&gt; [(s.user.username,s.total) for s in Profile.objects.annotate(total=Count('sender_message'))]\n[('Asror', 3), ('Murod', 2), ('Husniddin', 0), ('Diyor', 0), ('Jasur', 0), ('Akbar', 0), ('Bekzod', 0), ('Sherzod', 0),\n('Eshmat', 0), ('Toshmat', 0)]\n</code></pre>"},{"location":"04_queryset_methods/#24-alias","title":"2.4 alias","text":"<p>alias() metodi annotate() metodi bilan bir hil, faqat u natijani vaqtinchalik saqlab, usha nom bilan boshqa amallarni bajarish uchun qo'llaniladi</p> <ol> <li>Har bir profilning yuborgan habarlar sonini agar 2 dan ortiq bo'lsa chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; [s.user.username for s in Profile.objects.alias(total=Count('sender_message')).filter(total__gte=3)]\n['Asror']\n</code></pre> <ol> <li>2 dan ortiq habar yuborgan profilni toping. Ulardan faqat berilgan ro'yxatdagi foydalanuvchilarnigina chiqaring</li> </ol> <pre><code>[s.user.username for s in Profile.objects.alias(total=Count('sender_message')).filter(total__gt=1).filter(user__user\nname__in=['Murod'])]\n['Murod']\n</code></pre>"},{"location":"04_queryset_methods/#25-order_by","title":"2.5 order_by","text":"<p>order_by QuerSetni tartiblab beradi 7. Hamma profillarni username bo'yicha tartiblab chiqaring</p> <pre><code>&gt;&gt;&gt; [s for s in Profile.objects.all().order_by('user__username')]\n[&lt;Profile: Akbar&gt;, &lt;Profile: Asror&gt;, &lt;Profile: Bekzod&gt;, &lt;Profile: Diyor&gt;, &lt;Profile: Eshmat&gt;, &lt;Profile: Husniddin&gt;, &lt;Prof\nile: Jasur&gt;, &lt;Profile: Murod&gt;, &lt;Profile: Sherzod&gt;, &lt;Profile: Toshmat&gt;]\n</code></pre> <ol> <li>Hamma profillarni username bo'yicha teskari tartiblab chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; [s for s in Profile.objects.all().order_by('-user__username')]\n[&lt;Profile: Toshmat&gt;, &lt;Profile: Sherzod&gt;, &lt;Profile: Murod&gt;, &lt;Profile: Jasur&gt;, &lt;Profile: Husniddin&gt;, &lt;Profile: Eshmat&gt;, &lt;P\nrofile: Diyor&gt;, &lt;Profile: Bekzod&gt;, &lt;Profile: Asror&gt;, &lt;Profile: Akbar&gt;]\n</code></pre> <ol> <li>Habarlarni avval yuboruvchi, keyin qabul qiluvchi username bo'yicha tartiblab chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; sender = None\n&gt;&gt;&gt; for s in Message.objects.all().order_by('sender__user__username', 'receiver__user__username'):\n...    if sender != s.sender:\n...       print('=======', s.sender)\n...    sender = s.sender\n...    print(s.receiver, s.subject)\n...\n======= Asror\nAkbar test ahabar\nDiyor test ahabar\nMurod test ahabar\n======= Murod\nAkbar test ahabar\nAsror test ahabar\n</code></pre>"},{"location":"04_queryset_methods/#26-reverse","title":"2.6 reverse","text":"<p>reverse tartiblangan (ya'ni order_by() metodi ishlatilgan) QuerySet teskarilab beradi. Tartiblanmagan QuerySetga ishlatishda ta'siri yo'q</p> <ol> <li>Quyidagi misol id bo'yicha tartiblangan loyihalar ro'yxatini (QuerySet) teskarilab beradi</li> </ol> <pre><code>&gt;&gt;&gt; [(pr.id,pr.title) for pr in Project.objects.all().order_by('id')]\n[(1, \"IT Academy online ta'lim\"), (2, 'ePark.uz'), (3, '\u0427\u0414 - \u0447\u0435 \u0434\u0443\u043c\u0430\u0435\u0448?'), (4, 'Dolina capital'), (5, 'Kannas-textile'),\n (6, 'Alimax pro')]\n&gt;&gt;&gt; [(pr.id,pr.title) for pr in Project.objects.all().order_by('id').reverse()]\n[(6, 'Alimax pro'), (5, 'Kannas-textile'), (4, 'Dolina capital'), (3, '\u0427\u0414 - \u0447\u0435 \u0434\u0443\u043c\u0430\u0435\u0448?'), (2, 'ePark.uz'), (1, \"IT Acade\nmy online ta'lim\")]\n</code></pre>"},{"location":"04_queryset_methods/#27-values","title":"2.7 values","text":"<p>values faqat ko'rsatilgan jadval ustunidagi ma'lumotlarnigina olib dict ga o'girib beradi</p> <ol> <li>Bazada mavjud bo'lgan hamma dasturchilar malakasi nomini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Skill.objects.values('name')\n&lt;QuerySet [{'name': 'Python'}, {'name': 'Django'}, {'name': 'Django Rest Framework'}, {'name': 'Javascript'}, {'name': '\nReact'}, {'name': 'CSS,HTML'}, {'name': 'Python'}, {'name': 'Django'}, {'name': 'Javascript'}, {'name': 'React'}, {'name\n': 'NextJs'}]&gt;\n</code></pre>"},{"location":"04_queryset_methods/#27-distinct","title":"2.7 distinct","text":"<p>distinct QuerySet orasida duplikat qatorlarni chiqarib tashlaydi</p> <ol> <li>Bazada qanday malakali dasturchilar bor?</li> </ol> <pre><code>&gt;&gt;&gt; Skill.objects.values('name').distinct()\n&lt;QuerySet [{'name': 'Python'}, {'name': 'Django'}, {'name': 'Django Rest Framework'}, {'name': 'Javascript'}, {'name': '\nReact'}, {'name': 'CSS,HTML'}, {'name': 'NextJs'}]&gt;\n</code></pre> <p>Yuqoridan ma'lum bo'ladiki, duplikat malakalarni olin tashladi</p> <ol> <li>Tarkibida IT harflari mavjud bo'lgan loyihalarning id va nomini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Project.objects.filter(title__icontains='it').values('title', 'id')\n&lt;QuerySet [{'title': \"IT Academy online ta'lim\", 'id': 1}, {'title': 'Dolina capital', 'id': 4}]&gt;\n</code></pre> <p>E'tibor bering QuerySet Project oyektidan emas, values() metodida ko'rsatildan id va title dan tashkil topgan dict dan iborat</p> <ol> <li>Tarkibida IT harflari mavjud bo'lgan loyihalarning nomini kichik harflarda chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; from django.db.models.functions import Lower\n&gt;&gt;&gt; Project.objects.filter(title__icontains='it').values('id',title=Lower('title'))\n&lt;QuerySet [{'id': 1, 'ltitle': \"it academy online ta'lim\"}, {'id': 4, 'ltitle': 'dolina capital'}]&gt;\n</code></pre>"},{"location":"04_queryset_methods/#29-values_list","title":"2.9 values_list","text":"<p>values_list - values() metodi bilan deyarli bir hil faqat farqi shundaki, QuerySet tarkibidagi elementlar values() metodida dict toifasini bo'lsa, values_list() metodida tuple toifasi bo'ladi: 15. Teglarni hammasini ekranga dict va tuple ko'rinishida chiqaring. So'ng ulardan faqat birinchisini chiqaring</p> <pre><code>&gt;&gt;&gt; Tag.objects.values()\n&lt;QuerySet [{'id': 5, 'name': 'Python', 'created': datetime.date(2022, 7, 8)}, {'id': 6, 'name': 'React', 'created': date\ntime.date(2022, 7, 8)}, {'id': 7, 'name': 'Django', 'created': datetime.date(2022, 7, 8)}, {'id': 8, 'name': 'Django Res\nt Framework', 'created': datetime.date(2022, 7, 8)}, {'id': 9, 'name': 'Javascript', 'created': datetime.date(2022, 7, 8\n)}, {'id': 10, 'name': 'CSS,HTML', 'created': datetime.date(2022, 7, 8)}]&gt;\n&gt;&gt;&gt; Tag.objects.values_list()\n&lt;QuerySet [(5, 'Python', datetime.date(2022, 7, 8)), (6, 'React', datetime.date(2022, 7, 8)), (7, 'Django', datetime.dat\ne(2022, 7, 8)), (8, 'Django Rest Framework', datetime.date(2022, 7, 8)), (9, 'Javascript', datetime.date(2022, 7, 8)), (\n10, 'CSS,HTML', datetime.date(2022, 7, 8))]&gt;\n&gt;&gt;&gt; Tag.objects.values()[0]\n{'id': 5, 'name': 'Python', 'created': datetime.date(2022, 7, 8)}\n&gt;&gt;&gt; Tag.objects.values_list()[0]\n(5, 'Python', datetime.date(2022, 7, 8))\n</code></pre> <ol> <li>Teglarni hamma ma'lumoti emas, balki faqat id va nomini tuple ko'rinishida chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Tag.objects.values_list('id','name')\n&lt;QuerySet [(5, 'Python'), (6, 'React'), (7, 'Django'), (8, 'Django Rest Framework'), (9, 'Javascript'), (10, 'CSS,HTML')\n]&gt;\n</code></pre> <ol> <li>Boshidagi 3ta teglarni faqat nomlarini tuple ko'rinishida chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Tag.objects.values_list('id','name')[:3]\n&lt;QuerySet [(5, 'Python'), (6, 'React'), (7, 'Django')]&gt;\n</code></pre>"},{"location":"04_queryset_methods/#210-dates","title":"2.10 dates","text":"<p>dates metodi unikal qiymatlarni qaytaradi. Uning quyidagi parametrlari bor:</p> <ul> <li>year - ko'rsatilgan maydonning hamma qaytarilmas yillarini ro'yxatini qaytaradi</li> <li>month - ko'rsatilgan maydonning hamma qaytarilmas yil/oylarini ro'yxatini qaytaradi</li> <li>week - ko'rsatilgan maydonning hamma qaytarilmas yil/haftalarini ro'yxatini qaytaradi</li> <li> <p>day - ko'rsatilgan maydonning hamma qaytarilmas yil/oy/kunlarini ro'yxatini qaytaradi</p> </li> <li> <p>Qaysi yillarda dasturchilar tizimga qo'shilgan?</p> </li> </ul> <pre><code>&gt;&gt;&gt; Profile.objects.dates('created', 'year')\n&lt;QuerySet [datetime.date(2022, 1, 1), datetime.date(2021, 1, 1)]&gt;\n</code></pre> <p>Faqat 2021 va 2022 yilda dasturchilar tizimda ro'yxatdan o'tgan ekan</p> <ol> <li>2022 yilning qaysi oylarida dasturchilar tizimga qo'shilgan</li> </ol> <pre><code>&gt;&gt;&gt; Profile.objects.filter(created__year=2022).dates('created', 'month')\n&lt;QuerySet [datetime.date(2022, 6, 1), datetime.date(2022, 7, 1)]&gt;\n</code></pre> <p>Demak 2022 yilda iyun va iyulda oylarida dasturchilar tizimga qo'shilgan</p>"},{"location":"04_queryset_methods/#212-none","title":"2.12 none","text":"<p>none - bo'sh QuerSet ni qaytaradi , undan keyin boshqa so'rov amalga oshirilmaydi</p>"},{"location":"04_queryset_methods/#213-all","title":"2.13 all","text":"<p>all - jadvaldagi hamma ma'lumotlarni qaytaradi Avvalgi darsga qarang</p>"},{"location":"04_queryset_methods/#214-union","title":"2.14 union","text":"<p>union - ikkita QuerySet ni birlashtiradi. Bu yerda hususiyatlar bir hil bo'lishi kerakligini e'tiborga oling.</p> <ol> <li>Habar jo'natganlar va habar yuborganlar ro'yxatini chiqaring. Avval yuboruvchilarni olamiz, so'ng qabul qiluvchilarni, keyin ikkalasini birlashtiramiz</li> </ol> <pre><code>&gt;&gt;&gt; senders = Message.objects.values_list('sender__user__username')\n&gt;&gt;&gt; receivers = Message.objects.values_list('receiver__user__username')\n&gt;&gt;&gt; senders.union(receivers)\n&lt;QuerySet [('Akbar',), ('Asror',), ('Bekzod',), ('Diyor',), ('Eshmat',), ('Husniddin',), ('Jasur',), ('Murod',)]&gt;\n</code></pre>"},{"location":"04_queryset_methods/#215-intersection","title":"2.15 intersection","text":"<p>union kabi birdan ortiq QuerySet natijalari bilan ishlaydi, lekin u birlashtirmaydi, balki kesishuvchi qiymatlarni ajratib beradi</p> <ol> <li>Habar yuborgan va habar qabul qilgan foydalanuvchilarni chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; receivers = Message.objects.values_list('receiver__user__username')\n&gt;&gt;&gt; senders = Message.objects.values_list('sender__user__username')\n&gt;&gt;&gt; receivers\n&lt;QuerySet [('Asror',), ('Murod',), ('Murod',), ('Husniddin',), ('Diyor',), ('Diyor',), ('Diyor',), ('Diyor',), ('Akbar\n',), ('Akbar',)]&gt;\n&gt;&gt;&gt; senders\n&lt;QuerySet [('Asror',), ('Asror',), ('Asror',), ('Murod',), ('Murod',), ('Bekzod',), ('Bekzod',), ('Eshmat',), ('Jasur'\n,), ('Jasur',)]&gt;\n&gt;&gt;&gt; receivers.intersection(senders)\n&lt;QuerySet [('Asror',), ('Murod',)]&gt;\n</code></pre>"},{"location":"04_queryset_methods/#216-difference","title":"2.16 difference","text":"<p>difference - intersection kabi birdan ortiq QuerySet natijalari bilan ishlaydi. difference o'z nomi bilan farqini olib beradi. Faqat bunda qaysi QuerySet tarafidan difference chaqirilgan bo'lsa, usha QuerySet da bor, lekin qolganlarida yo'q bo'lganlarini ajratib beradi. E'tibor bering qaysi QuerySet dan chaqirilishiga qarab natijalar har hil bo'ladi.</p> <ol> <li>Avval faqat habar jo'natgan lekin qabul qilmagan foydalanuvchilarni, so'ng faqat habar qabul qilgan, ammo habar jo'natmaganlarni chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; receivers = Message.objects.values_list('receiver__user__username')\n&gt;&gt;&gt; senders = Message.objects.values_list('sender__user__username')\n&gt;&gt;&gt; receivers\n&lt;QuerySet [('Asror',), ('Murod',), ('Murod',), ('Husniddin',), ('Diyor',), ('Diyor',), ('Diyor',), ('Diyor',), ('Akbar\n',), ('Akbar',)]&gt;\n&gt;&gt;&gt; senders\n&lt;QuerySet [('Asror',), ('Asror',), ('Asror',), ('Murod',), ('Murod',), ('Bekzod',), ('Bekzod',), ('Eshmat',), ('Jasur'\n,), ('Jasur',)]&gt;\n&gt;&gt;&gt; senders.difference(receivers)\n&lt;QuerySet [('Bekzod',), ('Eshmat',), ('Jasur',)]&gt;\n&gt;&gt;&gt; receivers.difference(senders)\n&lt;QuerySet [('Akbar',), ('Diyor',), ('Husniddin',)]&gt;\n</code></pre>"},{"location":"04_queryset_methods/#217-select_related","title":"2.17 select_related","text":"<p>select_related ulangan boshqa jadval ma'lumotlarini birdaniga oladi, keyinchalik ma'lumotlar bazasiga murojaat qilmaslik uchun. Bu boshida ko'proq vaqt olishi mumkin, lekin keyinchalik MBga murojaat bo'lmagani sababli tezlikni oshadi</p> <ol> <li>100 dab ochiq bal olgan loyihalarni toping, so'ng bu loyihani qilgan foydalanuvchilarni username ini chiqaring      1-usul. Har so'rovda MBga murojaat bo'ladi</li> </ol> <pre><code>&gt;&gt;&gt; qs = Project.objects.filter(vote_count__gt=100)\n&gt;&gt;&gt; qs.values_list('user__social_github')\n&lt;QuerySet [(None,), (None,), ('https://17husniddin.github.io/Potfolio/index.html',)]&gt;\n</code></pre> <p>2-usul. Keyingi so'rovlarda MBga murojaat bo'lmaydi</p> <pre><code>&gt;&gt;&gt; qs = Project.objects.select_related('user').filter(vote_count__gt=100)\n&gt;&gt;&gt; qs.values_list('user__social_github')\n&lt;QuerySet [(None,), (None,), ('https://17husniddin.github.io/Potfolio/index.html',)]&gt;\n</code></pre>"},{"location":"04_queryset_methods/#218-prefetch_related","title":"2.18 prefetch_related","text":"<p>select_related kabi ishlaydi, faqat u ko'pga-ko'p bog'lanishda ishlatiladi</p>"},{"location":"04_queryset_methods/#3-amaliyot-oquvchi","title":"3. Amaliyot. O'quvchi","text":"<ol> <li>Har bir profilning nechta loyihasi bor</li> <li>Har bir profilga yuborilgan habarlar soni</li> <li>Har bir profil izoh qoldirgan loyihlar soni</li> <li>Har bir loyiha nechta tegga tegishli</li> <li>Har bir tegda nechta loyiha yozilgan</li> <li>Loyihalarni nomi bo'yicha tartiblab chiqaring</li> <li>Habarlarni yuborgan foydlanuvchi username bo'yicha tartiblab chiqaring</li> <li>Habarlarni avval yuboruvchi username bo'yicha to'g'ri tartiblab, keyin qabul qiluvchi username bo'yicha teskari tartiblab chiqaring</li> <li>Tarkibida yaxshi, zo'r, chiroyli so'zlaridan biri mavjud bo'lgan habarlarni va yuboruvchi username ini chiqaring</li> <li>Loyihalarni hammasini ekranga dict va tuple ko'rinishida chiqaring</li> <li>Loyihalardan boshidagi ikkitasini ekranga tuple ko'rinishida chiqaring</li> <li>Profillarning hammasini faqat username ini chiqaring va telegramini tuple ko'rinishida chiqarib, username bo'yicha tartibab chiqaring</li> <li>2022 yil , aprel oyidagi hamma habarlarni chiqaring.</li> <li>2022 yil , aprelda qaysi kunlari habarlar jo'natilgan (faqat sanalar kerak)</li> <li>Avval barcha malakalarni nomini chiqaring, so'ng barcha teglar nomini. Keyin ikkalasini union bilan birlashtirib chiqaring</li> <li>Skill va Tag jadvallarining ikkalasida uchraydigan qiymatlarni (name) chiqaring</li> <li>Skill jadvalida mavjud, lekin Tag jadvalida mavjud bo'lmagan qiymatlarni (name) chiqaring</li> <li>Avval 5 ta foydalanuvchini chiqaring, so'ng ular yozgan habarlanri, agar bo'lsa. MBga murojaat bir marta bo'lsin</li> </ol>"},{"location":"05_queryset_functions/","title":"Mavzu 5: QuerySet. Mantiqiy shartlar va agregat funksiyalar","text":""},{"location":"05_queryset_functions/#reja","title":"Reja:","text":"<ol> <li>Bilim</li> <li>1.1 Terminlar</li> <li>1.2 O'qish uchun materiallar</li> <li>Amaliyot. O'qituvchi</li> <li>Amaliyot. O'quvchi</li> </ol>"},{"location":"05_queryset_functions/#1-bilim","title":"1. Bilim","text":""},{"location":"05_queryset_functions/#11-terminlar","title":"1.1 Terminlar","text":""},{"location":"05_queryset_functions/#2-amaliyot-oqituvchi","title":"2. Amaliyot. O'qituvchi","text":"<p>Reja:</p> <ul> <li>[2.1 Shartlar bilan ishlash]</li> <li>[2.1.1 Mantiqiy OR]</li> <li>[2.1.1 Mantiqiy AND]</li> <li>[2.2 Agregat funksiyalar]</li> <li>[2.2.1 Count]</li> <li>[2.2.2 Avg]</li> <li>[2.2.3 Min]</li> <li>[2.2.4 Max]</li> <li>[2.2.5 Sum]</li> </ul> <p></p>"},{"location":"05_queryset_functions/#21-shartlar-bilan-ishlash","title":"2.1 Shartlar bilan ishlash","text":""},{"location":"05_queryset_functions/#211-mantiqiy-or","title":"2.1.1 Mantiqiy OR","text":"<ol> <li>Loyiha nomida IT yoki .uz so'zlari bo'lgan loyihalar ro'yxatini chiqaring</li> </ol> <p>1-usul</p> <pre><code>&gt;&gt;&gt; Project.objects.filter(title__icontains='it') | Project.objects.filter(title__icontains='.uz')\n\n&lt;QuerySet [&lt;Project: IT Academy online ta'lim&gt;, &lt;Project: ePark.uz&gt;, &lt;Project: Dolina capital&gt;]&gt;\n</code></pre> <p>2-usul</p> <pre><code>&gt;&gt;&gt; from django.db.models import Q\n&gt;&gt;&gt; Project.objects.filter(Q(title__icontains='.uz') and Q(title__icontains='it'))\n\n&lt;QuerySet [&lt;Project: IT Academy online ta'lim&gt;, &lt;Project: Dolina capital&gt;]&gt;\n</code></pre> <ol> <li>Foydalanuvchi ro'yxatdan o'tgan oy aprel, may yoki dekabr bo'lgan foydalanuvchilarni chiqaring</li> </ol> <p>Avval hammasini ko'rib olamiz</p> <pre><code>&gt;&gt;&gt; for pr in Profile.objects.all(): print(pr, pr.created)\n\nAsror 2022-01-06\nMurod 2022-02-06\nHusniddin 2022-03-08\nDiyor 2022-04-08\nAkbar 2021-05-08\nBekzod 2022-06-08\nSherzod 2022-07-08\nEshmat 2022-07-08\nToshmat 2022-12-08\nJasur 2022-12-08\n</code></pre> <p>Endi filtrlaymiz:</p> <p>1-usul</p> <pre><code>&gt;&gt;&gt; for pr in Profile.objects.filter(created__month__in=[4,5,12]): print(pr, pr.created)\n\nDiyor 2022-04-08\nAkbar 2021-05-08\nToshmat 2022-12-08\nJasur 2022-12-08\n</code></pre> <p>2-usul</p> <pre><code>&gt;&gt;&gt; for pr in Profile.objects.filter(Q(created__month=4) | Q(created__month=5) | Q(created__month=12)): print(pr, pr.created)\n\nDiyor 2022-04-08\nAkbar 2021-05-08\nToshmat 2022-12-08\nJasur 2022-12-08\n</code></pre>"},{"location":"05_queryset_functions/#212-mantiqiy-and","title":"2.1.2 Mantiqiy AND","text":"<ol> <li>github v instagram bor bo'lgan dasturchilari chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; for pr in Profile.objects.filter(Q(social_github__isnull=False) &amp; Q(social_instagram__isnull=False)): print( pr.social_instagram,pr.social_github, pr.user.username)\n\nhttps://www.instagram.com/husnidd1n_17/ https://17husniddin.github.io/Potfolio/index.html Husniddin\n</code></pre> <ol> <li>2022 yil yanvardan aprelgacha ro'yxatdan o'tganlarni chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; for pr in Profile.objects.filter(Q(created__year=2022) &amp; Q(created__month__range=[1,4])): print(pr.user.username,pr.created)\n\nAsror 2022-01-06\nMurod 2022-02-06\nHusniddin 2022-03-08\nDiyor 2022-04-08\n</code></pre>"},{"location":"05_queryset_functions/#22-agregat-funksiyalar","title":"2.2 Agregat funksiyalar","text":"<p>Agregat funksiyalar avval ma'lum guruhga tegishli ma'lumotni yig'ib oladi, so'ng uni qayta ishlaydi To'liqlor ma'lumot</p>"},{"location":"05_queryset_functions/#221-count","title":"2.2.1 Count","text":"<p>Ikki hil usulda ishlatish mumkin:</p> <ul> <li>hamma qatorlar soni</li> <li>ma'lum guruhga tegishli qiymatlar soni</li> </ul> <p>Avg o'rtacha qiymatni topish uchun ishlatiladi</p> <ol> <li>Hamma loyihalar sonini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Profile.objects.count()\n\n10\n</code></pre> <ol> <li>Nomida it so'zi uchragan loyihalar sonini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Project.objects.filter(title__icontains='it').count()\n\n2\n</code></pre> <ol> <li>Asror bildirgan fikrlar sonini aniqlang</li> </ol> <p> Avval filtrlab olamiz</p> <pre><code>&gt;&gt;&gt; Review.objects.filter(user__user__username='Asror')\n\n&lt;QuerySet [&lt;Review: Zo'r loyiha bo'libdi&gt;, &lt;Review: CSS, HTML da qilinganmi&gt;]&gt;\n</code></pre> <p>Endi sonini chiqaramiz</p> <pre><code>&gt;&gt;&gt; Review.objects.filter(user__user__username='Asror').count()\n\n2\n</code></pre>"},{"location":"05_queryset_functions/#endi-malum-guruhga-tegishli-qiymatlar-sonini-aniqlashni-koramiz","title":"Endi ma'lum guruhga tegishli qiymatlar sonini aniqlashni ko'ramiz","text":"<ol> <li>Har bir foydalanuvchi nechtadan loyihasi borligini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; from django.db.models import Count\n&gt;&gt;&gt; for pr in Profile.objects.annotate(total_projects=Count('project')):\n...     print(pr, pr.total_projects)\n\nAsror 1\nMurod 1\nHusniddin 1\nDiyor 3\nJasur 0\nAkbar 0\nBekzod 0\nSherzod 0\nEshmat 0\nToshmat 0\n</code></pre>"},{"location":"05_queryset_functions/#222-avg","title":"2.2.2 Avg","text":"<p>Avg - o'rtacha qiymatni topib, dict qaytaradi</p> <ol> <li>Loyihaga berilgan o'rtacha ovozlar sonini aniqlang</li> </ol> <pre><code>&gt;&gt;&gt; from django.db.models import Avg\n&gt;&gt;&gt; Project.objects.aggregate(Avg('vote_count'))\n\n{'vote_count__avg': 138.33333333333334}\n</code></pre> <p>yoki dict dagi kalitni o'zimiz bersak ham bo'ladi</p> <pre><code>&gt;&gt;&gt; from django.db.models import Avg\n&gt;&gt;&gt; Project.objects.aggregate(avarage=Avg('vote_count'))\n\n{'avarage': 138.33333333333334}\n</code></pre>"},{"location":"05_queryset_functions/#223-min","title":"2.2.3 Min","text":"<p>Min - eng kichigini(son, sana) topib, dict qaytaradi.</p> <ol> <li>Loyihaga berilgan eng kichik ovozni chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; from django.db.models import Min\n&gt;&gt;&gt; Project.objects.aggregate(min=Min('vote_count'))\n\n{'min': 30}\n</code></pre>"},{"location":"05_queryset_functions/#224-max","title":"2.2.4 Max","text":"<ol> <li>Loyihaga berilgan eng katta ovozni chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; from django.db.models import Max\n&gt;&gt;&gt; Project.objects.aggregate(max=Max('vote_count'))\n\n{'max': 300}\n</code></pre>"},{"location":"05_queryset_functions/#225-sum","title":"2.2.5 Sum","text":"<ol> <li>Loyihaga berilgan ovozlar yig'indisini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; from django.db.models import Sum\n&gt;&gt;&gt; Project.objects.aggregate(sum=Sum('vote_count'))\n\n{'sum': 830}\n</code></pre> <ol> <li>Loyihaga berilgan ovozlar sonini min, max, o'rtacha va yig'indisini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Project.objects.aggregate(sum=Sum('vote_count'), avg=Avg('vote_count'), max=Max('vote_count'), min=Min('vote_count'))\n\n{'sum': 830, 'avg': 138.33333333333334, 'max': 300, 'min': 30}\n</code></pre>"},{"location":"05_queryset_functions/#birga-kop-boglanishda-agregat-funskiyalar","title":"Birga ko'p bog'lanishda agregat funskiyalar","text":"<ol> <li>Hamma foydalanuvchining hamma malakasi sonini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Profile.objects.aggregate(Count('user_skills'))\n\n{'user_skills__count': 11}\n</code></pre> <ol> <li>Har bir foydalanuvchining nechtadan malakasi bor?</li> </ol> <pre><code>&gt;&gt;&gt; for pr in Profile.objects.annotate(soni = Count('user_skills')):\n...    print(pr, pr.soni)\n\nAsror 3\nMurod 2\nHusniddin 3\nDiyor 3\nJasur 0\nAkbar 0\nBekzod 0\nSherzod 0\nEshmat 0\nToshmat 0\n</code></pre> <ol> <li>Har bir tegda nechtadan loyiha qilingan</li> </ol> <pre><code>&gt;&gt;&gt; for tag in Tag.objects.annotate(soni = Count('project_tag')):\n...   print(tag, tag.soni)\n\nPython 2\nReact 3\nDjango 1\nDjango Rest Framework 1\nJavascript 5\nCSS,HTML 3\ntest 0\n</code></pre> <p>Xulosa, masalan, Pythonda ikkita loyiha qilingan ekan</p> <ol> <li>Har bir tegda nechtadan loyiha qilinganligini tartiblab chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; for tag in Tag.objects.annotate(soni = Count('project_tag')):\n...   print(tag, tag.soni)\n\nPython 2\nReact 3\nDjango 1\nDjango Rest Framework 1\nJavascript 5\nCSS,HTML 3\ntest 0\n</code></pre>"},{"location":"05_queryset_functions/#3-amaliyot-oquvchi","title":"3. Amaliyot. O'quvchi","text":"<ol> <li>10 ta yoki 20 ovoz olgan loyihalarni chiqaring</li> <li>Yuzgacha yoki 1000dan ortiq ovoz olgan loyihalarni chiqaring</li> <li>2022 yil sentyabrdan dekabrgacha ro'yxatdan o'tgan foydalanuvchilar ro'yxati</li> <li>2021 yil yanvardan aprelgacha va 2022 yil sentyabrdan dekabrgacha ro'yxatdan o'tgan foydalanuvchilar ro'yxati</li> <li>Hamma foydalanuvchilar sonini chiqaring</li> <li>Hamma habarlar sonini chiqaring</li> <li>Hamma fikrlar sonini chiqaring</li> <li>Asrorga yuborilgan habarlar soni</li> <li>Asror yuborgan habarlar soni</li> <li>100 dan ortiq ovoz olgan loyihalar soni</li> <li>Har bir foydalanuvchi nechtadan habar jo'natgan</li> <li>Har bir foydalanuvchi nechtadan habar qabul qilgan</li> <li>Review modelidagi o'rtacha value ni toping</li> <li>Loyihaga berilgan eng kichik ovozni chiqaring</li> <li>Loyihaga berilgan eng katta ovozni chiqaring</li> <li>Har bir loyihada nechta teg (soha, dasturlash tili) bor?</li> <li>Har bir loyihaga nechtadan fikr bildirilgan</li> <li>Har bir foydalanuvchiga nechtadan habar jo'natilgan</li> </ol>"},{"location":"06_queryset_outro/","title":"Mavzu 6: QuerySet. QuerySet qaytarmaydigan metodlar","text":""},{"location":"06_queryset_outro/#reja","title":"Reja:","text":"<ol> <li>Bilim</li> <li>1.1 Terminlar</li> <li>1.2 O'qish uchun materiallar</li> <li>Amaliyot. O'qituvchi</li> <li>Amaliyot. O'quvchi</li> </ol>"},{"location":"06_queryset_outro/#1-bilim","title":"1. Bilim","text":""},{"location":"06_queryset_outro/#11-terminlar","title":"1.1 Terminlar","text":""},{"location":"06_queryset_outro/#2-amaliyot-oqituvchi","title":"2. Amaliyot. O'qituvchi","text":"<p>Reja:</p> <ul> <li>[2.1 get]</li> <li>[2.2 create]</li> <li>[2.3 get_or_create]</li> <li>[2.4 update_or_create]</li> <li>[2.5 bulk_create]</li> <li>[2.6 bulk_update]</li> <li>[2.7 count]</li> <li>[2.8 in_bulk]</li> <li>[2.9 latest]</li> <li>[2.10 earliest]</li> <li>[2.11 first]</li> <li>[2.12 last]</li> <li>[2.13 aggregate]</li> <li>[2.14 exists]</li> <li>[2.15 contains]</li> <li>[2.16 update]</li> <li>[2.17 delete]</li> <li>[2.18 explain]</li> </ul> <p>Ma'lumotlar bazasini yuklab oling</p>"},{"location":"06_queryset_outro/#21-get","title":"2.1 get","text":"<ol> <li>username='Asror' bo'lgan foydalanuvchi avtobiografiyasini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Profile.objects.get(user__username='Asror').bio\n\n'lorem ipsum'\n</code></pre>"},{"location":"06_queryset_outro/#22-create","title":"2.2 create","text":"<ol> <li>username=Asror bo'lgan foydalanuvchiga yana bitta malaka qo'shing: FastAPI</li> </ol> <pre><code>&gt;&gt;&gt; Skill.objects.create(name='Fast API', user=Profile.objects.get(user__username='Asror'))\n\n&lt;Skill: Fast API&gt;\n</code></pre> <p>Endi tekchirib ko'ramiz:</p> <pre><code>&gt;&gt;&gt; for skill in Skill.objects.all(): print(skill.name, skill.user)\n\nPython Asror\nDjango Asror\nDjango Rest Framework Asror\nJavascript Murod\nReact Murod\nCSS,HTML Husniddin\nPython Husniddin\nDjango Husniddin\nJavascript Diyor\nReact Diyor\nNextJs Diyor\nFast API Asror\n</code></pre>"},{"location":"06_queryset_outro/#23-get_or_create","title":"2.3 get_or_create","text":"<p>Avval get() metodini eslab olamiz: </p> <ol> <li>Agar username='Asror', first_name='Asror', last_name='Abduvosiqov' bo'lgan foydalanuvchini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; User.objects.get(username='Asror', first_name='Asror', last_name='Abduvosiqov')\n\n&lt;User: Asror&gt;\n</code></pre> <ol> <li>Agar username='Mahmud', first_name='Mahmud', last_name=\"Yusup o'g'li\" bo'lgan foydalanuvchi bo'lsa, ushani chiqaring, agar bazada mavjud bo'lmasa, u holda avval kiritib, keyin uni qiymatlarini chiqaring</li> </ol> <p>Agarda get() metodi yordamida amalga oshirsak, u holda bazada bo'lmasa xatolik bo'ladi:</p> <pre><code>&gt;&gt;&gt; User.objects.get(username='Mahmud', first_name='Mahmud', last_name='Yusup')\n\n...\ndjango.contrib.auth.models.User.DoesNotExist: User matching query does not exist.\n</code></pre> <p>Agar get_or_create() metodidan foydalansak, u holda agar bazada bo'lmasa, o'zi kiritib qo'yadi:</p> <pre><code>&gt;&gt;&gt; User.objects.get_or_create(username='Mahmud', first_name='Mahmud', last_name='Yusup')\n\n(&lt;User: Mahmud&gt;, True)\n</code></pre> <p>Ikkinchi marta yana yozsak:</p> <pre><code>&gt;&gt;&gt; User.objects.get_or_create(username='Mahmud', first_name='Mahmud', last_name='Yusup')\n(&lt;User: Mahmud&gt;, False)\n</code></pre> <p>Demak bu metoddan tuple() qaytadi:</p> <ul> <li>Berilgan model obyekti(User)</li> <li>Bazada endi kiritilganligi (True), yok mavjudligini (False) bildiradigan bool qiymat</li> </ul>"},{"location":"06_queryset_outro/#24-update_or_create","title":"2.4 update_or_create","text":"<ol> <li>Agar username='Yusuf' bo'lgan foydalnuvchi bazada bor bo'lsa, u holda uni first_name va last_name qiymatlarini o'zgartiring: first_name='Yusuf', last_name='Qobulov'. Agar topilmasa, yangi foydalanuvchi kiriting</li> </ol> <pre><code>&gt;&gt;&gt; User.objects.update_or_create(username='Yusuf', defaults={'first_name': 'Yusuf', 'last_name': 'Qobulov'})\n\n(&lt;User: Yusuf&gt;, True)\n\n&gt;&gt;&gt; User.objects.get(username='Yusuf').first_name\n\n'Yusuf'\n</code></pre> <p>Qaytarilgan ikkinchi qiymatdan (True) bilamizki bazada yo'q ekan, natijada kiritib qo'ydi</p> <pre><code>&gt;&gt;&gt; User.objects.update_or_create(username='Yusuf', defaults={'first_name': 'Yusufjon', 'last_name': 'Qobulov'})\n\n(&lt;User: Yusuf&gt;, False)\n\n&gt;&gt;&gt; User.objects.get(username='Yusuf').first_name\n\n'Yusufjon'\n</code></pre> <p>Ikkinchi marta boshqa qiymat bilan bergan edik, bazadan unique bo'lgan usernameni topib uni first_name va last_name qiymarlarini o'zgaritirib qo'ydi (False)</p>"},{"location":"06_queryset_outro/#25-bulk_create","title":"2.5 bulk_create","text":"<p>bulk_create() metodi birdaniga bir nechta qiymat berish uchun ishlatiladi</p> <ol> <li> <p>username='Husniddin' ga username='Asror'dan 2 ta habar jo'nating:</p> </li> <li> <p>body='matn 1', subject='1-habar'</p> </li> <li>body='matn 2', subject='2-habar'</li> </ol> <pre><code>&gt;&gt;&gt; asror = Profile.objects.get(user__username='Asror')\n&gt;&gt;&gt; husniddin = Profile.objects.get(user__username='Husniddin')\n&gt;&gt;&gt; Message.objects.bulk_create([Message(sender=asror, receiver=husniddin, subject='1-habar',body='matn 1'), Message(s\nender=asror, receiver=husniddin, subject='2-habar',body='matn 2')])\n\n[&lt;Message: 1-habar&gt;, &lt;Message: 2-habar&gt;]\n</code></pre>"},{"location":"06_queryset_outro/#26-bulk_update","title":"2.6 bulk_update","text":"<p>bulk_update() metodi birdaniga bir qancha obyektlarni o'zgartirish uchun ishlatiladi. Bu metod yangilangan ob'yektlar sonini qaytaradi</p> <ol> <li>Hamma loyihalarni vote_count qiymatini 10 balga ochirlsin.</li> </ol> <p>Avval hamma loyihalarga qanchadan bal berilganini ko'rib olamiz:</p> <pre><code>&gt;&gt;&gt; for pr in Project.objects.all(): print(pr, pr.vote_count)\n\nIT Academy online ta'lim 100\nePark.uz 150\n\u0427\u0414 - \u0447\u0435 \u0434\u0443\u043c\u0430\u0435\u0448? 200\nDolina capital 30\nKannas-textile 50\nAlimax pro 300\nePark 100\n</code></pre> <p>Endi o'zgartiramiz. Avval o'zgargan ob'yektlar ro'yxatini hosil qilib olamiz. So'ng bulk_update() metodiga parametr sifatida beramiz</p> <pre><code>&gt;&gt;&gt; for pr in Project.objects.all():\n...    pr.vote_count += 10\n...    projects.append(pr)\n\n&gt;&gt;&gt; Project.objects.bulk_update(projects, ['vote_count'])\n\n7\n</code></pre>"},{"location":"06_queryset_outro/#27-count","title":"2.7 count","text":"<p>Qaytgan QuerySetdagi obyektlar sonini qaytaradi</p> <ol> <li>30 dan ortiq ovoz olgan loyihalarni sonini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Project.objects.filter(vote_count__gte=30).count()\n\n7\n</code></pre> <p>Demak 30 dan ortiq ovoz olgan loyihalarni soni 7 ta ekan</p>"},{"location":"06_queryset_outro/#28-in_bulk","title":"2.8 in_bulk","text":"<p>in_bulk() metodi bittada bir nechta obyektlarni qaytarish uchun ishlatiladi. U dict() qaytaradi</p> <ol> <li>Hamma malakalarni id si bilan dict ko'rinishida chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Skill.objects.in_bulk()\n\n{9: &lt;Skill: Python&gt;, 10: &lt;Skill: Django&gt;, 11: &lt;Skill: Django Rest Framework&gt;, 12: &lt;Skill: Javascript&gt;, 13: &lt;Skill: Rea\nct&gt;, 14: &lt;Skill: CSS,HTML&gt;, 15: &lt;Skill: Python&gt;, 16: &lt;Skill: Django&gt;, 17: &lt;Skill: Javascript&gt;, 18: &lt;Skill: React&gt;, 19:\n &lt;Skill: NextJs&gt;, 20: &lt;Skill: Fast API&gt;}\n</code></pre> <ol> <li>id=10 va id=11 bo'lgan malakalarni dict ko'rinishida chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; Skill.objects.in_bulk([10,11])\n\n{10: &lt;Skill: Django&gt;, 11: &lt;Skill: Django Rest Framework&gt;}\n</code></pre>"},{"location":"06_queryset_outro/#29-latest","title":"2.9 latest","text":"<p>latest() metodi berilgan hususiyat bo'yicha eng ohirgisini olib beradi</p> <ol> <li>Eng ohirgi ro'yxatdan o'tgan foydalanuvchi</li> </ol> <pre><code>&gt;&gt;&gt; User.objects.latest('date_joined')\n\n&lt;User: Yusuf&gt;\n</code></pre>"},{"location":"06_queryset_outro/#210-earliest","title":"2.10 earliest","text":"<p>earliest() metodi berilgan hususiyat bo'yicha eng boshidagini olib beradi</p> <ol> <li>Eng avval ro'yxatdan o'tgan foydalanuvchi</li> </ol> <pre><code>&gt;&gt;&gt; User.objects.earliest('date_joined')\n\n&lt;User: admin&gt;\n</code></pre>"},{"location":"06_queryset_outro/#211-first","title":"2.11 first","text":"<p>first() metodi shunchaki QuerySetda turgan eng birinchisini qaytaradi</p> <ol> <li>Foydalanuvchi tarafidan qilingan loyihani soni bo'yicha tartiblab chiqarng. Ro'yxatda eng birinchisini chiqaring</li> </ol> <pre><code>&gt;&gt;&gt; users = Profile.objects.annotate(total=Max('project')).filter(total__isnull=False).order_by('-total')\n&gt;&gt;&gt; for user in users: print(user, user.total)\n\nHusniddin 6\nMurod 5\nDiyor 4\nAsror 1\n</code></pre> <p>Endi shu ro'yxatdan birnchisini chiqaramiz:</p> <pre><code>&gt;&gt;&gt; users[0]\n\n&lt;Profile: Husniddin&gt;\n</code></pre> <p>yoki</p> <pre><code>&gt;&gt;&gt; users.first()\n\n&lt;Profile: Husniddin&gt;\n</code></pre>"},{"location":"06_queryset_outro/#212-last","title":"2.12 last","text":"<ol> <li>last() metodi first() dan farqi shuki, u eng ohirgisini olib beradi</li> </ol> <pre><code>&gt;&gt;&gt; users.last()\n&lt;Profile: Asror&gt;\n</code></pre> <p>lekin indexga -1 berib bo'lmaydi</p> <pre><code>&gt;&gt;&gt; users[-1]\nTraceback (most recent call last):\n  File \"&lt;console&gt;\", line 1, in &lt;module&gt;\n  File \"C:\\Users\\oybek\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\django\\db\\models\\query.py\", line 341,\n in __getitem__\n    raise ValueError(\"Negative indexing is not supported.\")\nValueError: Negative indexing is not supported.\n</code></pre>"},{"location":"06_queryset_outro/#213-aggregate","title":"2.13 aggregate","text":"<p>aggregate() metodi annotate dan farqi shuki, u hamma jadvaldagi qiymatlar bo'yicha ishlaydi, annotate esa har bir guruh qiymatlar bilan alohida ishlaydi. aggregate dan bitta natijaviy qiymat qaytadi va u dict() ko'rinishida bo'ladi</p> <ol> <li>Hamma loyihalar soni</li> </ol> <pre><code>&gt;&gt;&gt; Project.objects.aggregate(Count('id'))\n\n{'id__count': 7}\n</code></pre> <ol> <li>Loyihaga berilgan eng katta baho</li> </ol> <pre><code>&gt;&gt;&gt; Project.objects.aggregate(max_vote=Max('vote_count'))\n\n{'max_vote': 310}\n</code></pre>"},{"location":"06_queryset_outro/#214-exists","title":"2.14 exists","text":"<p>exists() metodi asosan qidirilganda bor yo'qligni bilish uchun ishlatiladi. Agar QuerySet bo'sh bo'lsa, False, aks holda True qaytaradi</p> <ol> <li>username='Anvar' foydalanuvchi bazada borligini aniqlang</li> </ol> <pre><code>&gt;&gt;&gt; User.objects.filter(username='Anvar').exists()\n\nTrue\n</code></pre> <p>Bor ekan</p> <ol> <li>title='ecommerce' loyihasi mavjudligini aniqlang</li> </ol> <pre><code>&gt;&gt;&gt; Project.objects.filter(title='ecommerce').exists()\n\nFalse\n</code></pre> <p>Yo'q ekan</p>"},{"location":"06_queryset_outro/#215-contains","title":"2.15 contains","text":"<p>contains() metodi QuerySet ichida berilgan obyekt bor yo'qligini aniqlab beradi. True/False qaytaradi</p> <ol> <li>Asror obyekti bazada bormi?</li> </ol> <p>Avval asror o'zgaruvchisini ko'ramiz</p> <pre><code>&gt;&gt;&gt; asror\n\n&lt;Profile: Asror&gt;\n</code></pre> <p>Endi bazada bor yo'qligini ko'ramiz</p> <pre><code>&gt;&gt;&gt; Profile.objects.all().contains(asror)\n\nTrue\n</code></pre> <p>Demak bazada bor ekan</p>"},{"location":"06_queryset_outro/#216-update","title":"2.16 update","text":"<p>update() metodi QuerySetdagi hamma obyektlarni o'zgartiradi. O'zgargan ob'yektlar sonini qaytaradi</p> <ol> <li> <p>Hamma foydalanuvchilarni avtobiografiyasini o'zgartiring:</p> </li> <li> <p>bio = 'Mening karyeram 2022 yildan boshlandi'</p> </li> </ol> <pre><code>&gt;&gt;&gt; Profile.objects.all().update(bio='Mening karyeram 2022 yildan boshlandi')\n\n10\n\n&gt;&gt;&gt; for user in Profile.objects.all(): print(user.bio)\n\nMening karyeram 2022 yildan boshlandi\nMening karyeram 2022 yildan boshlandi\nMening karyeram 2022 yildan boshlandi\nMening karyeram 2022 yildan boshlandi\nMening karyeram 2022 yildan boshlandi\nMening karyeram 2022 yildan boshlandi\nMening karyeram 2022 yildan boshlandi\nMening karyeram 2022 yildan boshlandi\nMening karyeram 2022 yildan boshlandi\nMening karyeram 2022 yildan boshlandi\n</code></pre> <p>username='Asror' foydalanuvchiga yana bitta loyiha qo'shing: title='Lorem tashkiloti sayti''</p>"},{"location":"06_queryset_outro/#217-delete","title":"2.17 delete","text":"<p>delete() metodi QuerySetdagi hamma obyektlarni bazadan o'chiradi. O'chirildan ob'yektlar sonini qaytaradi</p> <ol> <li>username=Husniddin ga yuborilgan hamma habarlarni o'chiring</li> </ol> <pre><code>&gt;&gt;&gt; Message.objects.filter(receiver=husniddin)\n\n&lt;QuerySet [&lt;Message: Ish masalasida&gt;, &lt;Message: 1-habar&gt;, &lt;Message: 2-habar&gt;]&gt;\n</code></pre> <p>Demak Husniddinga 3 habar jo'natilgan ekan</p> <pre><code>&gt;&gt;&gt; Message.objects.filter(receiver=husniddin).delete()\n\n(3, {'projects.Message': 3})\n</code></pre> <p>3 ta habarni o'chirdik, endi tekshirib ko'ramiz</p> <pre><code>&gt;&gt;&gt; Message.objects.filter(receiver=husniddin)\n&lt;QuerySet []&gt;\n</code></pre>"},{"location":"06_queryset_outro/#3-amaliyot-oquvchi","title":"3. Amaliyot. O'quvchi","text":"<ol> <li>username='Diyor' bo'lgan foydalanuvchining hamma loyihalarini chiqaring</li> <li>username='Asror' bo'lgan foydalanuvchining hamma malakalarini (skill) chiqaring</li> <li>username='Murod' bo'lgan foydalanuvchining yuborgan hamma habarlarini chiqaring</li> <li>username='Husniddin' bo'lgan foydalanuvchiga yana bitta loyiha qo'shing: Online school</li> <li> <p>username='Murod' bo'lgan foydalanuvchi username='Asror' ga habar jo'natsin: subject=\"Do'sting Muroddan\", body=\"Online ta'lim loyihasi juda ajoyib bo'libdi\"</p> </li> <li> <p>title='Online kindergarden' bo'lgan loyihani chiqaring, agar bazada bo'lmasa, u holda avval uni kiriting: vote_count=100, vote_ratio=50</p> </li> <li> <p>title='ePark' nomli loyihani topib qiymatlarni o'zgartiring: vote_count=10, vote_ratio=30 . Agar bazada bo'lmasa, u holda yangi kiritib, keyin chiqaring</p> </li> <li> <p>username='Asror'ga yana 4 ta malaka kiriting</p> </li> <li>Hamma foydalanuvchi first_name qiymatini katta harflar bilan yozib o'zgartirib chiqing. (M: Asror -&gt; ASROR)</li> <li>Hamma skill.definion hususiyatiga 'lorem ipsum' deb o'zgartiring</li> <li>Pythonni biladiganlar sonini chiqaring</li> <li>Django va pythondan kamida bittasini biladiganlar sonini chiqaring</li> <li>Eng ohirgi yuborilgan habar</li> <li>Eng avval yuborilgan habar</li> <li>Eng birinchi ro'yxatdan o'tgan foydalanuvchi</li> <li>Eng katta ovoz olgan loyiha</li> <li>Eng ko'p habar olgan dasturchi</li> <li>Eng ko'p fikr bildirilgan loyiha</li> <li>Eng ohirgi ro'yxatdan o'tgan foydalanuvchi</li> <li>Eng kam ovoz olgan loyiha</li> <li>Eng kam habar olgan dasturchi</li> <li>Eng kam fikr bildirilgan loyiha</li> <li>Hamma foydalanuvchilar soni</li> <li>Loyihaga berilgan eng kichik baho</li> <li>Loyihaga berilgan o'rtacha baho</li> <li>\"Lug'at\" nomli loyiha borligini aniqlang</li> <li>'Asror' habar yuborganligini aniqlang</li> <li>Loyihaga berilgan hamma ovozlarni ikki barobar oshiring</li> </ol>"},{"location":"07_api_intro/","title":"Mavzu 1: API va REST API","text":""},{"location":"07_api_intro/#reja","title":"Reja:","text":"<ul> <li>1 Terminlar</li> <li>2 Nazariya</li> </ul>"},{"location":"07_api_intro/#1-terminlar","title":"1 Terminlar","text":"<pre><code>API - application programming interface. API - bu ikki kompyuterni yoki ikki ilovani bog'lab turuvchi dasturdir. API boshqa ilovalarga hizmat ko'rsatuvchi dastur interfeysidir. Oddiy qilib aytganda u **habar yetkazuvchidir**\nREST - Agar API REST arxitekurasi (qoidasi) bo'yicha tuzilgan bo'lsa, u holda u REST API deyiladi.\nstatus code - serverdan qaytgan Response holatini bildiruvchi kodlar\nCRUD - Creat (yangi tuzish) Read (o'qish) Update (o'zgartirish) Delete (o'chirish). http method turlariga qo'llaniladi\nJSON - JavaScript Object Notation. REST API shu formatda ishlatiladi.\nHost name - URLda o'zgarmaydigan qismi\nEndpoint - URLdagi o'zgaradigan qismi\n</code></pre>"},{"location":"07_api_intro/#2-nazariya","title":"2 Nazariya","text":"<p>Reja</p> <ul> <li>2.1 API</li> <li>2.1.1 API nima?</li> <li>2.1.2 API foydalari</li> <li>2.1.3 API turlari</li> <li>2.1.4 API protokollari</li> <li>2.1.5 API hujjati</li> <li>2.2 REST API</li> <li>2.2.1 Terminlar</li> <li>2.2.2 Misollar</li> </ul>"},{"location":"07_api_intro/#21-api","title":"2.1 API","text":""},{"location":"07_api_intro/#211-api-nima","title":"2.1.1 API nima?","text":"<p>Manba</p> <p>API - bu ikki kompyuterni yoki ikki ilovani bog'lab turuvchi dasturdir. API boshqa ilovalarga hizmat ko'rsatuvchi dastur interfeysidir. Oddiy qilib aytganda u **habar yetkazuvchidir** </p> <p> Keling tushunib olish oson bo'lishi uchun bitta real bo'lmagan misol ko'ramiz </p> <p> Aytaylik, siz restoranga tashrif buyurdingiz, xizmatkor sizga menyuni taqdim etdi. Nima yeyishni o'zingiz hal bilasiz. Bu pitsa, makaron yoki kartoshka bo'lishi mumkin. Xizmatkor buyurtmangizni oshpazga olib boradi. Ovqatingiz tayyor bo'lgach, u yana sizga yetkazib beradi. </p> <p></p> <p> Bu juda oddiy jarayon. Ovqat qanday tayyorlanishi yoki oshxona ichida sodir bo'ladigan boshqa narsalar haqida tashvishlanishingiz shart emas. Bu yerda xizmatkor API vazifasini bajaradi. U siz va oshxona o'rtasidagi aloqani o'rnatadigan vositadir. </p> <p> API nimaligini haqida tasavvurga ega bo'ldik deb umid qilaman. Endi esa real misolni ko'ramiz </p> <p> Deylik birorta ilovada ro'yxatdan o'tishingiz kerak, odatda ko'p ilovalarda Facebook yoki Google orqali ro'yxatdan o'tish imkoniyati bo'ladi.  </p> <p> Bu qanday ishlashini hech o'ylab ko'rganmisiz? </p> <p></p> <p> Facebook va Google allaqachon sizning ma'lumotlaringizga ega, shuning uchun har bir foydalanuvchining ma'lumotlarini qaytadan yozish kabi zerikarli vazifani bajarish o'rniga, ilova API orqali ularning ma'lumotlar bazasiga kirib, kerakli ma'lumotlarni olib, ro'yxatdan o'tkazib qo'yadi. </p> <p></p> <p> Yana bir mashhur misol - ob-havo ilovasi. Agar siz uni dasturini yozmoqchi bo'lsangiz, siz jismonan borib, butun dunyo bo'ylab ma'lumotlarni yozib ololmaysiz. Buning o'rniga ob-havo ma'lumotlarini olish uchun tegishli API-dan foydalanishingiz mumkin. </p> <p></p> <p> Xo'sh, bu o'g'irlik uchun eshiklarni ochadi. Shuning uchun API kalitlaridan foydalanadi. API kaliti identifikatsiya va avtorizatsiya uchun ishlatiladi, bu foydalanuvchilarni kuzatib borish uchun ishlatiladigan xavfsizlik kodidan boshqa narsa emas. Aytish joizki, har bir APIda ham kalit mavjud emas. </p> <p></p> <p> Bundan tashqari, kompaniyalar odatda tashqi ilovalardan o'z xizmatlari va mahsulotlariga kirishni ta'minlash uchun ulardan foydalanadilar. </p> <p> Ular ko'pincha mobil ilovalarni ishlab chiqishda ishlatiladi, lekin ular ikki xil veb-saytlarni ulash yoki uchinchi tomon dasturlari bilan integratsiya qilish uchun ham ishlatilishi mumkin. </p> <p></p>"},{"location":"07_api_intro/#212-api-foydalari","title":"2.1.2 API foydalari","text":"<ul> <li>Ko'rinish va tirbandlikni oshirish</li> <li>Uzluksiz integratsiya</li> <li>Samaradorlikni oshirish</li> <li>Osonroq texnik xizmat ko'rsatish</li> <li>Kamaytirilgan xarajatlar</li> <li>Murakkablikni yashiradi</li> </ul> <ul> <li>Request - so'rov bo'lib, mijozdan serverga yuboriladi. (Masalan \"mahsulotlar ro'yxati\" ni ko'rish uchun so'rov)</li> <li> <p>Response - javob bo'lib, serverdan mijozga so'rovga javob sifatida yuboriladi. (Masalan \"mahsulotlar ro'yxati\" so'roviga tegishli ma'lumotlarni qaytarish)      API qaysi qurilmalar tomonidan ishlatiladi?</p> </li> <li> <p>Android</p> </li> <li>iOS</li> <li>Browser</li> <li>Desktop</li> </ul>"},{"location":"07_api_intro/#213-api-turlari","title":"2.1.3 API turlari","text":"<p>Manba Maqsadiga ko'ra turlari:</p> <ul> <li>Ma'lumot API. Bunday APIlar ma'lumotlar bazalari yoki veb-xizmatlar kabi turli manbalardan ma'lumotlarga kirish imkonini beradi. Ular ko'pincha ma'lumot olish yoki hisob-kitoblarni amalga oshirish uchun ishlatiladi.</li> <li>Funksional API. Masalan, ular yordamida hisobingizni boshqarishingiz yoki onlayn mahsulotlarni xarid qilishingiz mumkin.</li> <li>Qayta ishlovchi API. Masalan, faylni bir formatdan boshqasiga o'zgartirish yoki ziplab saqlash uchun siqib qo'yishlar misol bo'ladi.</li> </ul> <p></p> <p>Ishlatilishiga ko'ra turlari:</p> <ul> <li>Ochiq. Ular minimal cheklovlar bilan foydalanuvchilar uchun mavjud. Foydalanuvchilar HTTP protokoli orqali ularga kirishlari mumkin.</li> <li>Hamkorlik. Ular texnik jihatdan ochiq API bilan bir xil, lekin cheklangan kirishga ega</li> <li>Yopiq. Ular tashqi foydalanuvchilardan yashiringan. Ulardan kompaniya ichida foydalanish mumkin.</li> </ul>"},{"location":"07_api_intro/#214-api-protokollari","title":"2.1.4 API protokollari","text":"<ul> <li>HTML. HTML veb-sahifaga asoslangan. Foydalanish oson, lekin imkoniyati cheklangan</li> <li>XML. HTMLga qaraganda imoniyati ko'p, ammo undan foydalanish murakkabroq bo'lishi mumkin.</li> <li>JSON. XML-ga nisbatan yengil bo'lib, uni o'qish va yozish oson. U RESTful API-larda mashhur, chunki u tez va samarali.</li> </ul>"},{"location":"07_api_intro/#215-api-hujjati","title":"2.1.5 API hujjati","text":"<p>API hujjati bu APIdan qanday foydalanish haqidagi ma'lumotdir.   Hujjatdan quyidagi savollarga javob berish mumkin:</p> <ul> <li>qanday API lar mavjud?</li> <li>qanday metod ishlatiladi (get,post,put,...)</li> <li>qanday ma'lumotlar mijoz tarafidan yuborish kerak</li> <li>qanday ma'lumotlar serverdan qaytib keladi</li> <li>nechta ma'lumot keladi</li> <li>ma'lumotlar qanday nom bilan keladi</li> </ul> <p></p>"},{"location":"07_api_intro/#22-rest-api","title":"2.2 REST API","text":""},{"location":"07_api_intro/#221-terminlar","title":"2.2.1 Terminlar","text":"<p>REST - Representational state transfer.  Agar API REST arxitekurasi (qoidasi) bo'yicha tuzilgan bo'lsa, u holda u REST API deyiladi.</p> <p> Terminlar bilan tanishamiz:</p> <ul> <li>endpoint</li> <li>method (CRUD)</li> <li>Headers (status code)</li> <li>ma'lumot (JSON)</li> </ul>"},{"location":"07_api_intro/#endpoint-va-host-name","title":"Endpoint va host name","text":"<p>Host name - URLda o'zgarmaydigan qismi Endpoint - URLdagi o'zgaradigan qismi </p> <p></p> <p>1-URL hamma ma'lumotlar uchun:</p> <ul> <li>method GET bo'lsa, hamma kinolarni qaytaradi</li> <li>method POST bo'lsa, yangi kino kiritadi   </li> </ul> <p>2-URL individual ma'lumot uchun:</p> <ul> <li>method GET bo'lsa, id=127 bo'lgan kino haqida to'liq ma'lumotni qaytaradi</li> <li>method PUT bo'lsa, id=127 bo'lgan kinoga tegishli ko'rsatilgan ma'lumotini o'zgartiradi</li> <li>method DELETE bo'lsa, id=127 bo'lgan kinoni o'chiradi</li> </ul>"},{"location":"07_api_intro/#serializer","title":"Serializer:","text":"<p>Serialize - Murakkab obyektni JSON formatiga mos bo'lgan dict toifasiga o'girib berish </p> <p></p> <p>Turlari:</p> <ul> <li>Serialize - Python dagi obyektni json formatiga moslab beradi. Bu jarayon so'rov jo'natganda (Request) ishlatiladi </li> <li>Deserialize - Json formatni Python obyektiga o'girish. Bu jarayon so'rovga javob kelgan (Response) ishlatiladi   </li> </ul> <p>  Serializer turlari:</p> <ul> <li>serializers.Serializer</li> <li>serializers.ModelSerializer</li> </ul>"},{"location":"07_api_intro/#view","title":"View","text":"<p>Turlari:</p> <ul> <li>Class based</li> <li>Function based</li> </ul> <p>API bilan ishlavchi dasturlar</p> <ul> <li>DRF Browser API</li> <li>Postman</li> <li>HTTPie</li> </ul>"},{"location":"07_api_intro/#method-crud","title":"Method (CRUD)","text":"<p> CRUD termini ko'p ishlatiladi. CRUD shunchaki boshqacha nomlanishi. Creat (yangi tuzish) Read (o'qish) Update (o'zgartirish) Delete (o'chirish) so'zlarining qisqartmasidir. </p> <p></p>"},{"location":"07_api_intro/#headers-status-code","title":"Headers (Status code)","text":"<p>Umumiylashtirilgan ko'rinishi:  </p> <p> To'liqroq:</p> <p></p>"},{"location":"07_api_intro/#malumot-json","title":"Ma'lumot (JSON)","text":""},{"location":"07_api_intro/#222-misollar","title":"2.2.2 Misollar","text":"<p>Mahsulotlar ro'yxati uchun:</p> <ul> <li>https://www.api.movielist.com/movies/</li> <li>https://www.api.movielist.com/movies/list/</li> </ul> <p>Individual mahsulot uchun</p> <ul> <li>https://www.api.movielist.com/movies/102/</li> <li>https://www.api.movielist.com/movies/102/reviews/</li> <li>https://www.api.movielist.com/movies/102/reviews/?limit=20</li> </ul> <p>Kirish va ro'yxatdan o'tish uchun</p> <ul> <li>https://www.api.movielist.com/movies/account/login/</li> <li>https://www.api.movielist.com/movies/account/register/</li> </ul>"},{"location":"08_api_outro/","title":"Mavzu 7: API va REST API","text":""},{"location":"08_api_outro/#reja","title":"Reja:","text":"<ol> <li>Bilim</li> <li>1.1 Terminlar</li> <li>1.2 O'qish uchun materiallar</li> <li>Amaliyot. O'qituvchi</li> <li>Amaliyot. O'quvchi</li> </ol>"},{"location":"08_api_outro/#1-bilim","title":"1. Bilim","text":""},{"location":"08_api_outro/#11-terminlar","title":"1.1 Terminlar","text":""},{"location":"08_api_outro/#2-amaliyot-oqituvchi","title":"2. Amaliyot. O'qituvchi","text":"<p>Reja:</p> <ul> <li>2.1 Viewda modellarni qo'llash</li> <li>2.2 DRF. Serializer</li> <li>2.3 DRF. Function based view</li> <li>2.3.1 GET - Read</li> <li>2.3.2 POST - Create</li> <li>2.3.3 PUT - Update</li> <li>2.3.4 DELETE - Delete</li> <li>2.4 DRF. Postman bilan ishlash</li> <li>2.4.1 GET - Read</li> <li>2.4.2 POST - Create</li> <li>2.4.3 PUT - Update</li> <li>2.4.4 DELETE - Delete</li> <li>2.5 DRF. APIdan qaytadigan xatoliklar</li> <li>2.5.1 GET - Read</li> <li>2.5.2 POST - Create</li> <li>2.5.3 PUT - Update</li> <li>2.5.4 DELETE - Delete</li> </ul> <p>Ma'lumotlar bazasini yuklab oling</p>"},{"location":"08_api_outro/#21-viewda-modellarni-qollash","title":"2.1 Viewda modellarni qo'llash","text":"<p>Mashqlarni bajarishdan avval quyidagi amallarni bajaramiz:</p> <ol> <li>stduents_portfolio.urls    Bu yerda quyidagi qatorni kiritamiz</li> </ol> <pre><code>from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf.urls.static import static\nfrom django.conf import settings\n\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    # quyidagi 1 qator kod qo'shiladi\n    path('api/', include('projects.urls'))\n]\n</code></pre> <ol> <li>projects katalogida yangi urls.py nomli fayl ochamiz, keyin quyidagi kodni yozamiz</li> </ol> <pre><code>from django.contrib import admin\nfrom django.urls import path\nfrom .views import *\n\nurlpatterns = [\n\n]\n</code></pre> <p>Alohida urls.py ochib oldik, endi mashqlar orqali API yasashni o'rganamiz. Bu yerda hamma API json da qaytariladi</p> <ol> <li>Hamma loyihalarni qaytaradigan API yasang</li> </ol> <p>views.py</p> <pre><code>from django.http import JsonResponse\nfrom .models import *\n\n\ndef get_projects(requests):\n    data = Project.objects.all().values()\n    print(data[:2])\n    print(type(data))\n    print(list(data)[:2])\n    response = {\"projects\": list(data)}\n    return JsonResponse(response)\n</code></pre> <p>urls.py</p> <pre><code># bu yerda kodlar bo'ladi, faqat quyidagi o'zgartirishni qilasiz, uni o'zingiz bilib bilib o'zgartirish kiriting\n\nurlpatterns = [\n    path('projects/', get_projects)\n]\n</code></pre> <p>Endi ishga tushirib browzerdan http://127.0.0.1:8000/api/projects/ urlni teramiz</p> <pre><code>python manage.py runserver\n</code></pre> <p>Natija: Qora ekranda</p> <pre><code>&lt;QuerySet [{'id': 1, 'title': \"IT Academy online ta'lim\", 'description': 'Lorem ipsum dolor sit amet consectetur adipi\nsicing elit. Eos atque exercitationem obcaecati similique', 'image': 'projects/project-1.png', 'demo_link': None, 'sou\nrce_code': 'https://github.com/Oybeklinux/portfolio_drf.git', 'vote_count': 110, 'vote_ratio': 60, 'created': datetime\n.date(2022, 7, 6), 'user_id': 15}]&gt;\n\n=========\n\n&lt;class 'django.db.models.query.QuerySet'&gt;\n\n=========\n\n[{'id': 1, 'title': \"IT Academy online ta'lim\", 'description': 'Lorem ipsum dolor sit amet consectetur adipisicing eli\nt. Eos atque exercitationem obcaecati similique', 'image': 'projects/project-1.png', 'demo_link': None, 'source_code':\n 'https://github.com/Oybeklinux/portfolio_drf.git', 'vote_count': 110, 'vote_ratio': 60, 'created': datetime.date(2022\n, 7, 6), 'user_id': 15}]\n</code></pre> <p>Natija: Brovzerda</p> <p></p> <ol> <li>id orqali tegishli loyihani qaytaradigan API yasang</li> </ol> <p>views.py</p> <pre><code>from django.http import JsonResponse\nfrom .models import *\n\n# Bu yerda kodlar bor\n\ndef get_project(requests, id):\n    data = Project.objects.get(id=id)\n    print(data)\n    print('=========')\n    print(type(data))\n    print('=========')\n    data = data.__dict__\n    print(data)\n    data.pop('_state', 'not found')\n    response = data\n    return JsonResponse(response)\n</code></pre> <p>urls.py</p> <pre><code># bu yerda kodlar bo'ladi, faqat quyidagi o'zgartirishni qilasiz, uni o'zingiz bilib bilib o'zgartirish kiriting\n\nurlpatterns = [\n    #bu yerda kod bor\n    path('projects/&lt;int:id&gt;', get_project),\n]\n</code></pre> <p>Endi ishga tushirib browzerdan http://127.0.0.1:8000/api/projects/3/ urlni teramiz</p> <pre><code>python manage.py runserver\n</code></pre> <p>Natija: Qora ekranda</p> <pre><code>\u0427\u0414 - \u0447\u0435 \u0434\u0443\u043c\u0430\u0435\u0448?\n\n=========\n\n&lt;class 'projects.models.Project'&gt;\n\n=========\n\n{'_state': &lt;django.db.models.base.ModelState object at 0x000002658947E680&gt;, 'id': 3, 'title': '\u0427\u0414 - \u0447\u0435 \u0434\u0443\u043c\u0430\u0435\u0448?', 'desc\nription': 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Eos atque exercitationem obcaecati similique', 'im\nage': 'projects/project-3.png', 'demo_link': None, 'source_code': None, 'vote_count': 210, 'vote_ratio': 10, 'created'\n: datetime.date(2022, 7, 6), 'user_id': 20}\n</code></pre> <p>Natija: Brovzerda</p> <p></p> <ol> <li>Bu mashqni bajarishdan avval Tag modeliga name hususiyatiga unique beramiz. Ya'ni qaytarilmas bo'lsin</li> </ol> <p>projects/models.py</p> <pre><code>class Tag(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    created = models.DateField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.name}\"\n</code></pre> <p>Endi quyidagi komandani teramiz</p> <pre><code>&gt;&gt;&gt; python manage.py makemigrations\n&gt;&gt;&gt; python manage.py migrate\n</code></pre> <p>Endi vazifaga kirishamiz: </p> <ol> <li>Tag kiritish uchun API yasang</li> </ol> <p>projects/views.py</p> <pre><code>from django.http import JsonResponse\nfrom .models import *\n\n# Bu yerda kodlar bor\n\ndef insert_tag(request, name):\n    try:\n        tag = Tag.objects.create(name=name)\n    except Exception as error:\n        data = { \"ok\": False, \"error\": str(error)}\n    else:\n        data = tag.__dict__\n        data.pop('_state')\n        data[\"ok\"] = True\n        data[\"error\"] = \"\"\n\n    return JsonResponse(data)\n</code></pre> <p>projects/urls.py</p> <pre><code># bu yerda kodlar bor\n\nurlpatterns = [\n    #bu yerda kodlar bor\n    path('tags/&lt;str:name&gt;/', insert_tag),\n]\n</code></pre> <p>Endi ishga tushirib browzerdan http://127.0.0.1:8000/api/tags/javascript/ urlni teramiz</p> <pre><code>python manage.py runserver\n</code></pre> <p>Natija: Brovzerda</p> <p></p> <p></p> <p>Brovzerni yangilaymiz, yan'ni yana bir marta ishga tushiramiz</p> <p>Natija: Brovzerda</p> <p></p> <p> Ikkinchi marta javascript so'zini kiritib bo'lmaydi, chunki biz modelda unique=True qo'yganmiz, shuning uchun xatolik beradi</p> <ol> <li> <p>Postmanda 1-mashqdagi APIni bajaring    Avval Postman dasturini o'rnatib, \"student portfolio\" nomli collection ochamiz.    Keyin yangi request qo'shamiz:</p> </li> <li> <p>urlga: http://127.0.0.1:8000/api/projects/</p> </li> <li>method: GET</li> </ol> <p>Send ni bosamiz. Natija quyidagicha bo'ladi</p> <p></p> <p> Bu yerda 1-mashqdagi APIni Postmanda ishlatib ko'ryapmiz.</p> <ol> <li>Loyiha kiritadigan API yasang    </li> </ol> <p>projects/views.py</p> <pre><code># bu yerda kodlar bor\n\ndef insert_project(request):\n\n    title = request.headers['title']\n    definition = request.headers['definition']\n    user = request.headers['user']\n    try:\n        project = Project.objects.create(title=title,\n                                         description=definition,\n                                         user_id=user\n                                         )\n    except Exception as error:\n        data = {\n            \"error\": str(error)\n        }\n        return JsonResponse(data)\n\n    data = project.__dict__\n    data.pop('_state', '')\n    data.pop('image', '') # rasmni jsonga o'girib bo'lmaydi\n    return JsonResponse(data)\n</code></pre> <p>projects/urls.py</p> <pre><code># Bu yerd kodlar bor\n\nurlpatterns = [\n    # Bu yerd kodlar bor\n    path('projects/insert/', insert_project),\n]\n</code></pre> <p>Endi Postmanda sinash uchun 3-mashqda bajarilgan APIni copy qilib nomini o'zgartiramiz</p> <p> </p> <p>Endi ishga tushirib browzerdan http://127.0.0.1:8000/api/projects/insert/ urlni teramiz</p> <pre><code>python manage.py runserverm\n</code></pre> <p>Natija: Postmanda</p> <p></p> <p> Hozircha user_id ni DB Browser for SQLite dasturidan ko'rib olamiz. Ya'ni profile jadvalidagi id lar</p> <ol> <li>Loyihani o'chiradigan API yasang</li> </ol> <p>projects/views.py</p> <pre><code># Bu yerda kodlar bor\n\ndef delete_project(request, pk):\n    project = Project.objects.get(id=pk)\n    project.delete()\n    return JsonResponse({\"message\": 'Project is deleted'})\n</code></pre> <p>projects/urls.py</p> <pre><code># Bu yerda kodlar bor\n\nurlpatterns = [\n   # Bu yerda kodlar bor\n    path('projects/delete/&lt;int:pk&gt;/', delete_project),\n]\n</code></pre> <p>Endi Postmandan ishga tushiramiz</p> <p>Natija: Brovzerda</p> <p></p> <ol> <li>Loyihani o'zgartiradigan API yasang</li> </ol> <p>projects/views.py</p> <pre><code># Bu yerda kodlar bor\n\ndef edit_project(request, pk):\n    try:\n        project = Project.objects.get(id=pk)\n    except Exception as error:\n        return JsonResponse({\"error\": str(error)})\n\n    project.title = request.headers['title']\n    project.description = request.headers['definition']\n    project.save()\n    data = project.__dict__\n    data.pop('_state')\n    data.pop('image')\n    return JsonResponse(data)\n</code></pre> <p>projects/urls.py</p> <pre><code># Bu yerda kodlar bor\n\nurlpatterns = [\n   # Bu yerda kodlar bor\n    path('projects/edit/&lt;int:pk&gt;/', edit_project),\n]\n</code></pre> <p>Endi Postmandan ishga tushiramiz</p> <p>Natija: Brovzerda</p> <p></p> <p>Yuqoridagilar hammasi mashq uchun edi. Aslida kiritish uchun POST, o'chirish uchun DELETE, o'zgartirish uchun PUT, PATCH, olish uchun GET metodi ishlatiladi. Bularni biz Django REST framework bilan birga ko'ramiz</p>"},{"location":"08_api_outro/#22-drf","title":"2.2 DRF","text":"<p>Reja:</p> <ul> <li>DRFni o'rnatish</li> <li>Model (bu bajarilgan)</li> <li>Serializer</li> <li>View</li> <li>Urls</li> <li>Test</li> </ul> <p>Avval DRF ni o'rnatib sozlab olamiz</p> <p>O'rnatish</p> <pre><code>&gt;&gt;&gt; pip install djangorestframework\n</code></pre> <p>Ro'yxatdan o'tkazish</p> <p>student_postfolio/settings.py </p> <pre><code>INSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\n</code></pre> <p>Terminlar:</p> <pre><code>Serializer.\nModelserializer.\n</code></pre>"},{"location":"08_api_outro/#22-drf-serializer","title":"2.2 DRF. Serializer","text":"<p>Serializer ikkita ishni bajaradi:</p> <ul> <li>(Serialization) Obyektni(QuerySet) jsonga o'giradi. Response ga tayyorlash uchun</li> <li>(De-serialization) Jsonni obyektga(QuerySet) o'giradi. Requestdan qabul qilib, baza bilan ishlash uchun</li> </ul> <p></p> <p>Serializer 2 hil bo'ladi:</p> <ul> <li>Serializer. Bunda hamma hususiyatlar va uni toifasi yozib chiqiladi</li> <li>Modelserializer. Serializerdan voris. Osonlashtirilgan. Bunda ko'rsatiladigan hususiyatlar ro'yxati beriladi</li> </ul> <p></p> <p></p> <p></p> <ol> <li>Project modeli uchun serializer yozing.        Avval projects katalogi ichida serializers.py nomli fayl ochamiz. Keyin quyidagilarni yozamiz:</li> </ol> <p>projects/serializers.py </p> <pre><code>from rest_framework import serializers\nfrom .models import *\n\n\nclass ProjectSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Project\n        fields = ['id', 'title', 'description']\n</code></pre> <ol> <li>Tag modeli uchun</li> </ol> <p>projects/serializers.py </p> <pre><code># Bu yerda kodlar bor\n\nclass TagSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Tag\n        fields = '__all__'\n</code></pre>"},{"location":"08_api_outro/#23-drf-function-based-view","title":"2.3 DRF. Function based view","text":"<p>Bu yerdan boshlab hamma API lar DRF asosida bo'ladi</p>"},{"location":"08_api_outro/#231-get-read","title":"2.3.1 GET - Read","text":"<p>Boshqa nomi CRUD amallaridan biri bo'lgan Read, ya'ni bazadan o'qib, qaytaradi</p> <ol> <li>Hamma loyihalarni qaytaradigan DRF asosida API yasaymiz          Avval projects katalogidagi urls.py va view.py da hamma kodlarni o'chiramiz     </li> </ol> <p>projects/view.py </p> <pre><code>from .models import Project\nfrom .serializers import ProjectSerializer\nfrom rest_framework.response import Response\nfrom rest_framework.decorators import api_view\n\n\n@api_view(['GET'])\ndef projects(request):\n    if request.method == 'GET':\n        projects = Project.objects.all()\n        serializer = ProjectSerializer(projects, many=True)\n        return Response(serializer.data)\n</code></pre> <p>projects/urls.py </p> <pre><code># Bu yerda kodlar bor\n\nurlpatterns = [\n    path('projects/', projects),\n]\n</code></pre> <p>Endi ishga tushirib browzerdan http://127.0.0.1:8000/api/projects/ urlni teramiz</p> <pre><code>python manage.py runserver\n</code></pre> <p>Natija: Brovzerda</p> <p></p> <ol> <li>id orqali bitta loyihani oladigan API yasaymiz</li> </ol> <p>projects/view.py</p> <pre><code># Bu yerda kodlar bor\n\n@api_view(['GET'])\ndef project_detail(request, pk):\n    try:\n        project = Project.objects.get(pk=pk)\n    except Project.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n    if request.method == 'GET':\n        serializer = ProjectSerializer(project)\n        return Response(serializer.data)\n</code></pre> <p>projects/urls.py </p> <pre><code># Bu yerda kodlar bor\n\nurlpatterns = [\n    path('projects/', projects),\n    path('projects/&lt;int:pk&gt;', project_detail),\n]\n</code></pre> <p>Endi ishga tushirib browzerdan http://127.0.0.1:8000/api/projects/ urlni teramiz</p> <pre><code>python manage.py runserver\n</code></pre> <p>Natija: Brovzerda</p> <p></p>"},{"location":"08_api_outro/#232-post-create","title":"2.3.2 POST - Create","text":"<ol> <li>Loyiha qo'shish API sini yasaymiz</li> </ol> <p>projects/view.py</p> <pre><code>from .models import Project\nfrom .serializers import ProjectSerializer\nfrom rest_framework.response import Response\nfrom rest_framework.decorators import api_view\nfrom rest_framework import status\n\n\n@api_view(['GET', 'POST'])\ndef projects(request):\n    if request.method == 'GET':\n        # bu yerda kodlar bor\n    elif request.method == 'POST':\n        serializer = ProjectSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        else:\n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre> <p>Endi ishga tushirib browzerdan http://127.0.0.1:8000/api/projects/ urlni teramiz</p> <pre><code>python manage.py runserver\n</code></pre> <p>Natija: Brovzerda</p> <p></p>"},{"location":"08_api_outro/#233-put-update","title":"2.3.3 PUT - Update","text":"<ol> <li>id orqali bitta loyihani o'zgartira oladigan API yasaymiz</li> </ol> <p>projects/view.py</p> <pre><code># Bu yerda kodlar bor\n\n@api_view(['PUT', 'GET'])\ndef project_detail(request, pk):\n    try:\n        project = Project.objects.get(pk=pk)\n    except Project.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n    if request.method == 'GET':\n        serializer = ProjectSerializer(project)\n        return Response(serializer.data)\n    elif request.method == 'PUT':\n        serializer = ProjectSerializer(project,data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre> <p>projects/urls.py </p> <p>Endi ishga tushirib browzerdan http://127.0.0.1:8000/api/projects/ urlni teramiz</p> <pre><code>python manage.py runserver\n</code></pre> <p>Natija: Brovzerda</p> <p></p>"},{"location":"08_api_outro/#234-delete-delete","title":"2.3.4 DELETE - Delete","text":"<ol> <li>id orqali bitta loyihani o'chira oladigan API yasaymiz</li> </ol> <p>projects/view.py</p> <pre><code># Bu yerda kodlar bor\n\n@api_view(['PUT', 'DELETE', 'GET'])\ndef project_detail(request, pk):\n    try:\n        project = Project.objects.get(pk=pk)\n    except Project.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n    if request.method == 'GET':\n        serializer = ProjectSerializer(project)\n        return Response(serializer.data)\n    elif request.method == 'PUT':\n        serializer = ProjectSerializer(project,data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n    elif request.method == 'DELETE':\n        project.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n</code></pre> <p>Endi ishga tushirib browzerdan http://127.0.0.1:8000/api/projects/ urlni teramiz</p> <pre><code>python manage.py runserver\n</code></pre> <p>Natija: Brovzerda</p> <p></p>"},{"location":"08_api_outro/#24-drf-postman-bilan-ishlash","title":"2.4 DRF. Postman bilan ishlash","text":"<ol> <li>Yuqoridagi loyiha uchun qilingan CRUD APIlarini Postmanda ishlatamiz</li> </ol> <p>API ikki hil bo'ladi:</p> <ul> <li>URLda id bilan beriladi. Bu bitta obyekt bilan ishlash uchun</li> <li>URLda id berilmaydi. Bu bitta obyektga tegishli bo'lmagan holat uchun ishlatiladi</li> </ul>"},{"location":"08_api_outro/#241-get-read","title":"2.4.1 GET - Read","text":"<p>GET metodi ma'lumotni qaytaradi va status=200 bo'ladi</p> <p>  Quyidagi esa bitta obyektni qaytarish GET</p> <p></p> <p>GET metodini o'rgandik, faqat bu yerda URL da id bilan yuboriladi</p>"},{"location":"08_api_outro/#242-post-create","title":"2.4.2 POST - Create","text":"<p>POST metodi ma'lumotni bazaga kiritadi va status=201 bo'ladi</p>"},{"location":"08_api_outro/#243-put-update","title":"2.4.3 PUT - Update","text":"<p>PUT metodi URLda ko'rsatilgan id bo'yicha ma'lumotni o'zgartiradi, so'ng o'zgargan obyektni qaytaradi va status=200 bo'ladi</p>"},{"location":"08_api_outro/#244-delete-delete","title":"2.4.4 DELETE - Delete","text":"<p>DELETE metodi URLda ko'rsatilgan id bo'yicha ma'lumotni o'chiradi, so'ng hech narsa qaytarmaydi va status=204 bo'ladi</p>"},{"location":"08_api_outro/#25-drf-apidan-qaytadigan-xatoliklar","title":"2.5 DRF. APIdan qaytadigan xatoliklar","text":""},{"location":"08_api_outro/#251-get-read","title":"2.5.1 GET - Read","text":"<p>Agar mavjud bo'lmagan id berilsa, status=404 qaytadi, ya'ni bunday id li ma'lumot yo'qligini bildiradi  </p>"},{"location":"08_api_outro/#252-post-create","title":"2.5.2 POST - Create","text":"<p>Bu yerda null majburiy qiymatlarni bermasa, xatolik bo'ladi. Keling avval majburiy hususiyatlarni aniqlab olaylik:</p> <p></p> <p>Bu yerda null=True yoki default='...' yoki ManyToMany (ko'pga ko'p bog'lanish) bo'lsa, ular majburiy emas. Ya'ni bu hususiyatlar berilmasa, null yoki default qiymatni oladi. ManyToMany holatini ko'ramiz  </p> <p>Bu yerda uchinchi jadval manjud bo'lib, bu jadvalga hech narsa kiritilmaydi</p> <p>Endi POST APIni ko'ramiz. Project modelida faqat title majburiy:</p> <p></p> <p>Ko'rinib turibdiki, title ni berish kerakligi haqida xatolik qaytardi va status=200, ya'ni xato so'rovligini bildiradi</p> <p></p> <p>Agar faqat majburiy hususiyatlarnigina bersak xatolik bo'lmaydi:</p> <p></p>"},{"location":"08_api_outro/#253-put-update","title":"2.5.3 PUT - Update","text":"<p>Mavjud bo'lmagan id ni bersa, xatolik qaytaradi va status=404 bo'ladi</p> <p></p> <p>Majburiy hususiyatni bermasa, xatolik qaytaradi va status=400 bo'ladi</p> <p></p>"},{"location":"08_api_outro/#254-delete-delete","title":"2.5.4 DELETE - Delete","text":"<p>Mavjud bo'lmagan id ni bersa, xatolik qaytaradi va status=404 bo'ladi</p> <p></p>"},{"location":"08_api_outro/#3-amaliyot-oquvchi","title":"3. Amaliyot. O'quvchi","text":"<ol> <li>Hamma malakalarni qaytaradigan API yasang</li> <li>Hamma profillarni qaytaradigan API yasang</li> <li>Hamma teglarni qaytaradigan API yasang</li> <li>Hamma habarlarni qaytaradigan API yasang</li> <li>Malaka nomini kiritadigan API yasang</li> <li>Foydalanuvchi va Profilni birdaniga kiritadigan API</li> <li>Habar qo'shadigan API</li> <li>Malakani o'zgartiradigan API yasang (Hamma qiymatlarini o'zgartiradigan)</li> <li>Profilni ni o'zgartiradigan API yasang</li> <li>Tegni o'zgartiradigan API yasang</li> <li>Habarni o'zgartiradigan API yasang</li> <li>Malakani o'chiradigan API yasang</li> <li>Profilni o'chiradigan API yasang. Bunda user ham o'cib ketsin</li> <li>Tegni o'chiradigan API yasang</li> <li>Habarni o'chiradigan API yasang</li> <li>Django request va response JsonResponse class lari bilan django hujjalatidan tanishib chiqing</li> <li>Shunday API kerakki, urlda username nomi ko'rsatilsin, u orqali foydalanuvchi qidirilsin. Agar bor bo'lsa, usha foydalanuvchi haqida ma'lumot chiqsin, yo'q bo'lsa, habar bersin.</li> <li>Shunday API kerakki, urlda username nomi ko'rsatilsin, unga yuborilgan hamma habarlarni qaytarsin</li> <li>Shunday API kerakki, urlda username nomi ko'rsatilsin, u yuborgan hamma habarlarni qaytarsin</li> <li>Shunday API kerakki, urlda loyiha nomi ko'rsatilsin (M: project/ePark), unga yuborilgan hamma habarlarni qaytarsin</li> <li>Shunday API kerakki, urlda username nomi ko'rsatilsin, u orqali foydalanuvchi qidirilsin. Agar bor bo'lsa, u qilgan hamma loyihalarni qaytarsin</li> <li>Shunday API kerakki, eng ko'p ovoz olgan loyihalarni 3 tasini chiqarsin</li> <li>Shunday API kerakki, umuman ovoz olmagan loyihalarni chiqarsin</li> <li>Shunday API kerakki, 5 dan ortiq malakaga ega bo'lgan foydalanuvchilarni chiqarsin</li> <li>Hamma modellarga seriazlizer yozib chiqing</li> <li>Hamma modellar uchun CRUD APIlarini yozib chiqing</li> <li>Postmanda yuqoridagi hamma xatoliklarni generatsiya qiling</li> </ol>"},{"location":"09_views/","title":"Mavzu 8: Class View","text":""},{"location":"09_views/#reja","title":"Reja:","text":"<ol> <li>Bilim</li> <li>1.1 Terminlar</li> <li>1.2 O'qish uchun materiallar</li> <li>Amaliyot. O'qituvchi</li> <li>Amaliyot. O'quvchi</li> </ol>"},{"location":"09_views/#1-bilim","title":"1. Bilim","text":""},{"location":"09_views/#11-terminlar","title":"1.1 Terminlar","text":""},{"location":"09_views/#2-amaliyot-oqituvchi","title":"2. Amaliyot. O'qituvchi","text":"<p>Reja:</p> <ul> <li>2.1 APIView</li> <li>2.2 Mixin</li> <li>2.3 Generic view</li> <li>2.4 ViewSet</li> </ul>"},{"location":"09_views/#21-apiview","title":"2.1 APIView","text":"<p>Avvalgi darsdagi api_view larni izohga olib qo'ying</p> <ol> <li>Loyiha uchun CRUD amallarini bajaruvchi APIni APIView class yordamida bajaring</li> </ol> <p>views.py</p> <pre><code>from django.http import Http404\nfrom rest_framework.views import APIView\nfrom .models import Project\nfrom .serializers import ProjectSerializer\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\n\nclass Projects(APIView):\n\n    def get(self, request):\n        projects = Project.objects.all()\n        serializer = ProjectSerializer(projects, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = ProjectSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\nclass ProjectDetail(APIView):\n\n    def get_object(self, pk):\n        try:\n            return Project.objects.get(id=pk)\n        except Project.DoesNotExist:\n            raise Http404\n\n    def get(self, request, pk):\n        project = self.get_object(pk)\n        serializer = ProjectSerializer(project)\n        return Response(serializer.data)\n\n    def put(self, request, pk):\n        project = self.get_object(pk)\n        serializer = ProjectSerializer(project, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    def patch(self, request, pk):\n        project = self.get_object(pk)\n        serializer = ProjectSerializer(project, data=request.data, partial=True)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    def delete(self, request, pk):\n        project = self.get_object(pk)\n        project.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n</code></pre> <p>urls.py</p> <pre><code>from django.contrib import admin\nfrom django.urls import path\nfrom .views import *\n\nurlpatterns = [\n    path('projects/', Projects.as_view()),\n    path('projects/&lt;int:pk&gt;/', ProjectDetail.as_view()),\n]\n</code></pre> <p>Endi ishga tushirib, avvalgi darsda tayyorlab olgan Postmandagi APIlarni yana bir bor tekshirib chiqamiz. E'tibor bering bu gal PATCH metodi ham qo'shildi. Uni PUT dan farqi, unga biz PUT kabi hamma majburiy hususiyatlarni berishimiz shart emas, ixtiyoriy hususiyatlarni bitta yoki bir nechtasini bera olamiz, ya'ni qisman o'zgartirishdir</p> <pre><code>python manage.py runserver\n</code></pre> <p>Natija: Postmanda</p>"},{"location":"09_views/#pk-asoslanmagan-view","title":"PK asoslanmagan view","text":""},{"location":"09_views/#get","title":"GET","text":""},{"location":"09_views/#post","title":"POST","text":""},{"location":"09_views/#pk-ga-asoslangan-view","title":"PK ga asoslangan view","text":""},{"location":"09_views/#get_1","title":"GET","text":""},{"location":"09_views/#put","title":"PUT","text":""},{"location":"09_views/#patch","title":"PATCH","text":""},{"location":"09_views/#delete","title":"DELETE","text":""},{"location":"09_views/#22-mixin","title":"2.2 Mixin","text":"<p>Avvalgi kodlarni (APIView) izohga olib qo'ying</p> <ol> <li>Loyiha uchun CRUD amallarini bajaruvchi APIni Mixin class yordamida bajaring</li> </ol> <pre><code>from .models import Project\nfrom .serializers import ProjectSerializer\nfrom rest_framework import mixins, generics\n\n\nclass Projects(mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n\n    def get(self, request):\n        return self.list(request)\n\n    def post(self, request):\n        return self.create(request)\n\n\nclass ProjectDetail(mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, generics.GenericAPIView):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n\n    def get(self, request, pk):\n        return self.retrieve(request, pk)\n\n    def put(self, request, pk):\n        return self.update(request, pk)\n\n    def delete(self, request, pk):\n        return self.destroy(request, pk)\n</code></pre> <p>ishga tushiramiz, so'ng Postmanda APIlarni tekshiramiz. urls.py faylida hech qanday o'zgarish bo'lmaydi</p>"},{"location":"09_views/#23-generic-view","title":"2.3 Generic view","text":"<p>Avvalgi kodlarni (Mixin) izohga olib qo'ying</p> <ol> <li>Loyiha uchun CRUD amallarini bajaruvchi APIni Generic view class yordamida bajaring</li> </ol> <pre><code>from .models import Project\nfrom .serializers import ProjectSerializer\nfrom rest_framework import generics\n\n\nclass Projects(generics.ListCreateAPIView):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n\n\nclass ProjectDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n</code></pre> <p>Ko'rib turganingizdek, kodlar yanada qisqardi</p> <p>Serverni ishga tushiramiz, so'ng Postmanda APIlarni tekshiramiz. urls.py faylida hech qanday o'zgarish bo'lmaydi</p>"},{"location":"09_views/#24-viewset","title":"2.4 ViewSet","text":"<p>Avvalgi kodlarni (Generics) izohga olib qo'ying</p> <ol> <li>Loyiha uchun CRUD amallarini bajaruvchi APIni ViewSet view class yordamida bajaring</li> </ol> <pre><code>from .models import Project\nfrom .serializers import ProjectSerializer\nfrom rest_framework import viewsets\n\n\nclass ProjectViewSet(viewsets.ModelViewSet):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n</code></pre> <p>urls.py</p> <pre><code>from django.contrib import admin\nfrom django.urls import path, include\nfrom .views import *\nfrom rest_framework.routers import DefaultRouter\n\nrouter = DefaultRouter()\nrouter.register('projects', ProjectViewSet)\n\nurlpatterns = [\n    path('', include(router.urls))\n    # path('projects/', Projects.as_view()),\n    # path('projects/&lt;int:pk&gt;/', ProjectDetail.as_view()),\n\n]\n</code></pre> <p>Ko'rib turganingizdek, kodlar yanada qisqardi</p> <p>Serverni ishga tushiramiz, so'ng Postmanda APIlarni tekshiramiz. urls.py faylida hech qanday o'zgarish bo'lmaydi</p>"},{"location":"09_views/#3-amaliyot-oquvchi","title":"3. Amaliyot. O'quvchi","text":"<ol> <li>Hamma modellar uchun APIView yordamida CRUD APIlarini yozib chiqing</li> <li>Hamma modellar uchun Mixin yordamida CRUD APIlarini yozib chiqing</li> <li>Hamma modellar uchun Generics yordamida CRUD APIlarini yozib chiqing</li> <li>Hamma modellar uchun ViewSet yordamida CRUD APIlarini yozib chiqing</li> </ol>"},{"location":"10_serializer/","title":"Mavzu 9: Serializer. Pagination. Filtering. Security","text":""},{"location":"10_serializer/#reja","title":"Reja:","text":"<ol> <li>Bilim</li> <li>1.1 Terminlar</li> <li>1.2 O'qish uchun materiallar</li> <li>Amaliyot. O'qituvchi</li> <li>Amaliyot. O'quvchi</li> </ol>"},{"location":"10_serializer/#1-bilim","title":"1. Bilim","text":""},{"location":"10_serializer/#11-terminlar","title":"1.1 Terminlar","text":""},{"location":"10_serializer/#2-amaliyot-oqituvchi","title":"2. Amaliyot. O'qituvchi","text":"<p>Reja:</p> <ul> <li>2.1 Serializer</li> <li>2.1.1 Tarmoqli serializer</li> <li>2.1.2 Metod qo'shish</li> <li>2.1.3 Validatsiya</li> <li>2.2 Sahifalash - pagination</li> <li>2.2.1 PageNumberPagination<ul> <li>2.2.1.1 Global daraja</li> <li>2.2.1.2 Class daraja</li> </ul> </li> <li>2.2.4 LimitOffsetPagination</li> <li>2.3 Filtrlash - filter</li> <li>2.3.1 Filtrlash - Filter</li> <li>2.3.2 Qidirish - Search</li> <li>2.3.3 Tartiblash - Order</li> </ul>"},{"location":"10_serializer/#21-serialayzer","title":"2.1 Serialayzer","text":""},{"location":"10_serializer/#211-tarmoqli-serializer","title":"2.1.1 Tarmoqli serializer","text":""},{"location":"10_serializer/#masala-1","title":"Masala 1","text":"<p>Masala shuki, bazada muallif va kitob modeli bor. Shunday API kerakki unda hamma mualliflarni qaytarsin, har bir muallif bilan birga u maulliflarga tegishli kitoblar ro'yxatini ham qaytarsin</p> <p>Qadamlar:</p> <ol> <li>Yangi loyiha ochamiz. Nomi: books</li> <li>Yangi model (class/jadval) ochamiz</li> <li>Yangi tarmoqli serialayzer yozamiz</li> <li>Classga asoslangan view yozamiz</li> <li>URL marshrutlarni yozamiz</li> <li>Browzerda va Postman da test qilamiz</li> </ol>"},{"location":"10_serializer/#qadam-1","title":"Qadam 1","text":"<pre><code>&gt;&gt;&gt; django-admin startproject books .\n&gt;&gt;&gt; python manage.py startapp product\n</code></pre> <p>settings.py</p> <pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'product.apps.ProductConfig'\n]\n</code></pre>"},{"location":"10_serializer/#qadam-2","title":"Qadam 2","text":"<p>product/models.py</p> <pre><code>from django.db import models\n\n\n# Create your models here.\nclass Author(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=50)\n    rating = models.IntegerField()\n    author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name=\"books\")\n</code></pre>"},{"location":"10_serializer/#qadam-3","title":"Qadam 3","text":"<p>product/serializers.py</p> <pre><code>from rest_framework import serializers\nfrom .models import *\n\n\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = '__all__'\n\n\nclass AuthorSerializer(serializers.ModelSerializer):\n    books = BookSerializer(read_only=True, many=True)\n\n    class Meta:\n        model = Author\n        fields = '__all__'\n</code></pre>"},{"location":"10_serializer/#qadam-4","title":"Qadam 4","text":"<p>product/views.py</p> <pre><code>from .models import *\nfrom .serializers import *\nfrom rest_framework import generics\n\n\nclass AuthorListView(generics.ListCreateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n\n\nclass AuthorDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n\n\nclass BookListView(generics.ListCreateAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\n\nclass BookDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n</code></pre>"},{"location":"10_serializer/#qadam-5","title":"Qadam 5","text":"<p>books/urls.py</p> <pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('product.urls')),\n]\n</code></pre> <p>product/urls.py</p> <pre><code>from django.urls import path\nfrom .views import *\n\nurlpatterns = [\n    path('books/', BookListView.as_view()),\n    path('books/&lt;int:pk&gt;', BookDetailView.as_view()),\n    path('authors/', AuthorListView.as_view()),\n    path('authors/&lt;int:pk&gt;', AuthorDetailView.as_view()),\n]\n</code></pre>"},{"location":"10_serializer/#qadam-6","title":"Qadam 6","text":"<pre><code>&gt;&gt;&gt; python manage.py makemigrations\n&gt;&gt;&gt; python manage.py migrate\n&gt;&gt;&gt; python manage.py runserver\n</code></pre> <p>Quyidagi mualliflarni kiriting:</p> <pre><code>  1. Abdulhamid Cho\u02bblpon\n  2. Abdulla Qodiriy\n</code></pre> <p>Quyidagi kitoblarni kiritib chiqing:</p> <pre><code>  1. Abdulhamid Cho\u02bblpon\n    {\n        \"title\": \"Kecha va kunduz\",\n        \"rating\": 50,\n    },\n    {\n        \"title\": \"Vayronalar orasidan\",\n        \"rating\": 100,\n    }\n  2. Abdulla Qodiriy\n    {\n        \"title\": \"O\u02bbtkan kunlar\",\n        \"rating\": 150,\n    },\n    {\n        \"title\": \"Mehrobdan chayon\",\n        \"rating\": 200,\n    },\n    {\n        \"title\": \"Obid ketmon\",\n        \"rating\": 60,\n    }\n</code></pre> <p>Natija:</p> <p></p>"},{"location":"10_serializer/#masala-2","title":"Masala 2","text":"<p>Loyihalar API sidan kelayotgan userni id emas, balki obyekt ko'rinishida qaytarish kerak</p> <p></p> <pre><code>class ProjectSerializer(serializers.ModelSerializer):\n    user = UserForProjectSerializer(many=False)\n\n    class Meta:\n        model = Project\n        fields = '__all__'\n</code></pre> <p>Natija:</p> <p></p>"},{"location":"10_serializer/#masala-3","title":"Masala 3","text":"<p>Loyihalar API sidan kelayotgan tag id lari ro'yxatini o'rniga tag obyektlari ro'yxatini qaytarish kerak</p> <p></p> <pre><code>class ProjectSerializer(serializers.ModelSerializer):\n    user = UsersSerializer(many=False)\n    tag = TagSerializer(many=True)\n\n    class Meta:\n        model = Project\n        fields = '__all__'\n</code></pre> <p></p>"},{"location":"10_serializer/#212-metod-qoshish","title":"2.1.2 Metod qo'shish","text":""},{"location":"10_serializer/#masala-4","title":"Masala 4","text":"<p>Loyihalar API sidan shu loyihaga berilgan fikrlar (Review) ham qaytsin   Endi bu metodni yozib SerializerMethodField yordamida hususiyat kabi chiqaradigan qilamiz:</p> <pre><code>class ProjectSerializer(serializers.ModelSerializer):\n    user = UsersSerializer(many=False)\n    tag = TagSerializer(many=True)\n    reviews = serializers.SerializerMethodField()\n\n    class Meta:\n        model = Project\n        fields = '__all__'\n\n    def get_reviews(self, obj):\n        reviews = obj.review_set.all()\n        serializer = ReviewSerializer(reviews, many=True)\n        return serializer.data\n</code></pre> <p>Natija:</p> <p></p>"},{"location":"10_serializer/#213-validatsiya","title":"2.1.3 Validatsiya","text":""},{"location":"10_serializer/#built-in-validatsiya","title":"Built-in validatsiya","text":"<p>Bular model orqali beriladi. Masalan</p> <pre><code>from django.db import models\nfrom users.models import Profile\n\n\nclass Skill(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    created = models.DateField(auto_now_add=True)\n    user = models.ForeignKey(Profile, on_delete=models.SET_NULL, null=True, related_name=\"user_skills\")\n</code></pre> <ol> <li>name hususiyatiga 10 tadan oshiq harflar kiritib ko'ring, xatolik beradi. Chunki max_length=10</li> <li>description hususiyatini bo'sh qoldirib kiritib ko'ring xatolik beradi</li> </ol> <p>Yuqoridagilar cheklovlar validaysiya ro'lini bajaradi</p> <p></p> <p>Cheklovlar ko'p, ulardan yana ba'zilarini keltiramiz:</p> <ol> <li>blank=True - qiymat bo'sh bo'lsa, bo'sh satrni oladi</li> <li>null=True - bazada null qiymat saqlanishi mumkin</li> </ol>"},{"location":"10_serializer/#validatsiya-yozish","title":"Validatsiya yozish","text":""},{"location":"10_serializer/#hususiy-validatsiya","title":"Hususiy validatsiya","text":"<p>Qiymatni shartga tekshiradigan qilish uchun serializer ga yozsak bo'ladi. Qachonki is_valid() metodi chaqirilganda mana shu metodlar ishga tushadi. Uni yozish uchun nomlanish qoidasiga rioya qilish kerak. Yozilgna metod quyidagicha bo'lishi kerak:</p> <pre><code>def validate_hususiyat(self, value):\n    ...\n</code></pre> <p>Masala 1. Skill jadvaliga kiritilayotgan malaka nominida son bo'lmasin. Endi bu shartni tekshiradigan qilish uchun SkillSerializer ga qo'shimcha metod yozamiz:</p> <pre><code>import re\nfrom rest_framework import serializers\nfrom .models import Skill\n\n\nclass SkillSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Skill\n        fields = '__all__'\n\n    def validate_name(self, value):\n        if re.search('\\d', value):\n            raise serializers.ValidationError('Malaka nomida son kelmasin')\n        return value\n</code></pre> <p>Natija:</p> <p></p>"},{"location":"10_serializer/#umumiy-validatsiya","title":"Umumiy validatsiya","text":"<p>Umumiy validatsiya validate() metodida yoziladi:</p> <pre><code>from rest_framework import serializers\nfrom .models import Skill\nfrom users.serializers import *\nimport re\n\n\nclass SkillSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Skill\n        fields = '__all__'\n\n    def validate(self, data):\n        if re.search('\\d', data['name']):\n            raise serializers.ValidationError('Malaka nomida son kelmasin')\n        if 1 &lt; len(data['description']) &lt; 10:\n            raise serializers.ValidationError('Tavsif 10 harfdan kam bo''lmasin')\n        data['name'] = data['name'].lower()\n        return data\n</code></pre> <p>Natija:</p> <p></p> <p></p>"},{"location":"10_serializer/#22-sahifalash-pagination","title":"2.2 Sahifalash - pagination","text":""},{"location":"10_serializer/#221-pagenumberpagination","title":"2.2.1 PageNumberPagination","text":"<p>Avvalgi books loyihasini davvom ettiramiz</p>"},{"location":"10_serializer/#2211-global-daraja","title":"2.2.1.1 Global daraja","text":"<p>Sahifalashni global e'lon qilish uchun settings.py ga quyidagi yangi yozuvlarni kiritamiz. Bu holda setting.py faylidagi pagination sozlamalari hamma Generic view va ViewSet classlariga tasir qiladi. Mixin va APIVIEW larda uni alohida ko'rsatish kerak bo'ladi</p> <p>settings.py</p> <pre><code># ... bu yerda kodlar bor\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 2\n}\n\n# ... bu yerda kodlar bor\n</code></pre> <p>Izoh:</p> <ul> <li>PAGE_SIZE - bitta sahifada obyektlar soni. Ya'ni mazkur holatda bitta sahifada 2 ta kitob bo'ladi</li> <li>DEFAULT_PAGINATION_CLASS - pagination classni ko'rsatish uchun ishlatiladi.</li> <li>PageNumberPagination - Bu class ni ishlatsak, url http://127.0.0.1:8000/api/books/?page=2 ko'rinishda bo'ladi, ya'ni faqat sahifani raqami beriladi</li> </ul> <p>Ishga tushirib bravzerdan api/books/ va api/authors/ apilariga kirazmi</p> <p>Natija:</p> <p></p>"},{"location":"10_serializer/#2212-class-daraja","title":"2.2.1.2 Class daraja","text":"<p>Class darajada pagination sozlamalari settings.py faylida emas, balki class (genericview, ViewSet) ichida beriladi  Hozirgi holatda mualliflar ham sahifalanib chiqadi: </p> <ol> <li>Endi faqatgina api/authors/ APIsidan paginationni olib tashlaymiz. Buning uchun AuthorListView classida pagination_class = None deb yozamiz</li> </ol> <p>product.views.py</p> <pre><code>class AuthorListView(generics.ListCreateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    pagination_class = None\n</code></pre> <p>Natija:</p> <p></p> <ol> <li>Faqatgina api/authors/ APIsida sahifalash boshqacha bo'lsin. Masalan bitta sahifada bitta obyekt bo'lsin. Buning uchun alohida PageNumberPagination classdan voris bo'lgan class yozamiz. Keyin uni AuthosListView classining pagination_class hususiyatiga yozamiz</li> </ol> <pre><code>from .serializers import *\nfrom rest_framework import generics\nfrom rest_framework.pagination import PageNumberPagination\n\n\nclass AuthorPagination(PageNumberPagination):\n    page_size = 1\n\n\nclass AuthorListView(generics.ListCreateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    pagination_class = AuthorPagination\n</code></pre> <p>Natija: </p>"},{"location":"10_serializer/#224-limitoffsetpagination","title":"2.2.4 LimitOffsetPagination","text":"<ol> <li>Faqatgina api/authors APIsida bitta sahifada nechta obyekt bo'lishini klient tarafidan ko'rsata olsin. Buning uchun LimitOffsetPagination ni pagination_class ga ko'rsatamiz.</li> </ol> <pre><code>from rest_framework.pagination import PageNumberPagination, LimitOffsetPagination\n\n\nclass AuthorListView(generics.ListCreateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    pagination_class = LimitOffsetPagination\n</code></pre> <p>Bizda settings.py faylida PAGE_SIZE da 2 soni berilgna, bizda ham 2ta muallif bor, keyingi sahifa havolasini ko'rish uchun yana bitta muallif kiritamiz:</p> <p></p> <p>Natijani ko'ramiz: </p>"},{"location":"10_serializer/#23-filtrlash-filter","title":"2.3 Filtrlash - filter","text":"<p>Django da Filter ga filtr, tartiblash, qidirish funksiyalari kirib ketadi, bularni quyida birin ketin ko'rib o'tamiz. Bularni ham yuqoridagidek global va class darajasida sozlash mumkin. Endi ularni alohida yozib o'tirmaymiz  Izoh:</p> <ul> <li>filter - bu ayni shu qiymatga teng bo'lganlarni topib beradi</li> <li>search - berilgan qiymat ko'rsatilgan hususiyatning boshida , ohirida, orasida kelganlarni qidirib topib beradi</li> <li>order - o'sish yoki kamayish tartibida chiqarib beradi</li> </ul>"},{"location":"10_serializer/#231-filtrlash-filter","title":"2.3.1 Filtrlash - Filter","text":"<p>Filterni ishlatish uchun uni avval o'rnatib olamiz</p> <pre><code>&gt;&gt;&gt; pip install django-filter\n</code></pre> <p>settings.py</p> <pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'product',\n    'django_filters'\n]\n</code></pre> <ol> <li>books loyihasida hamma APIlarni filterlash imkoni bo'lsin. Mualliflarni hamma hususiyati bo'yicha, kitobni esa faqat title bo'yicha filtrlasin</li> </ol> <p>settings.py</p> <pre><code>REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 2,\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']\n}\n</code></pre> <p>Bu yerda filter global qilib e'lon qilindi. Endi Har bir classga alohida qaysi hususiyati bo'yicha filtrlash kerakligini ko'rsatamiz</p> <p>product/views.py</p> <pre><code># ...\n\nclass AuthorListView(generics.ListCreateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    pagination_class = LimitOffsetPagination\n    filterset_fields = '__all__'\n\n# ...\n\nclass BookListView(generics.ListCreateAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    filterset_fields = ['title']\n\n# ...\n</code></pre> <p>Izoh:</p> <ul> <li>filterset_fields - bu yerga filtrlash uchun modelning hususiyati ko'rsatiladi</li> </ul> <p>Mualliflarni hamma hususiyati bo'yicha filtrlasin deb yozdik (filterset_fields = 'all')  Kitoblarni esa faqat title bo'yicha filtrlasin deb yozdik (filterset_fields = ['title'])</p> <p>Natija:</p> <p>Mualliflarni filtrlash</p> <p></p> <p>Kitoblarni filtrlash</p> <p></p> <p>Muallif ismi bo'yicha filtrlaymiz</p> <p></p>"},{"location":"10_serializer/#232-qidirish-search","title":"2.3.2 Qidirish - Search","text":"<p>Avval global darajada berib qo'yamizsettings.py Qidirsh imkoniyatlari:</p> <ul> <li>'' - harfa katta kichikligidan qat'iy nazar qidiradi</li> <li>'^' - boshidan qidiradi</li> <li>'=' - ayni teng bo'lganini qidiradi</li> <li>'@' - Katta matndan qidiradi FTS-Full text search deb nomlanadi va bu faqat PostgreSQL da ishlaydi</li> <li>'$' - regex usulida qidirish</li> </ul> <pre><code>REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 2,\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend', 'rest_framework.filters.SearchFilter']\n}\n</code></pre> <ol> <li>Kitobni nomi orqali qidirish imkoni bo'lsin, lekin bu holda so'z sarlavha orasida, ohirida, boshida kelsa ham qaytarsin</li> </ol> <p>product/views.py Qaysi hususiyatlarni qidirish kerakligini search_fields hususiyatida ko'rsatib qo'yamiz</p> <pre><code>class BookListView(generics.ListCreateAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    filterset_fields = ['title']\n    search_fields = ['title']\n</code></pre> <p>Ya'ni faqat title bo'yicha qidirsin</p> <p>Natija: </p> <ol> <li>Muallifning ismi va familiyasi bo'yicha qidirish imkoni bo'lsin</li> </ol> <p>product/views.py</p> <pre><code># ...\n\nclass AuthorListView(generics.ListCreateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    pagination_class = LimitOffsetPagination\n    filterset_fields = '__all__'\n    search_fields = ['first_name', 'last_name']\n\n# ...\n</code></pre> <p>Natija:</p> <p></p> <p>'iy' harflarini berganda u ham ism ham sharifdan qidiradi</p> <ol> <li>Muallif ismida yoki sharifi boshidan qidirsin</li> </ol> <p>product/views.py</p> <pre><code># ...\n\nclass AuthorListView(generics.ListCreateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    pagination_class = LimitOffsetPagination\n    filterset_fields = '__all__'\n    search_fields = ['^first_name', '^last_name']\n\n# ...\n</code></pre> <p>Natija:</p> <p>Agar 'qo' ni yozsak, Qodiriy ismida uchraydi</p> <p></p> <p></p> <p>Agar 'iy' ni yozsak, hech qaysi ism yoki sharif boshida uchramaydi</p> <p></p>"},{"location":"10_serializer/#233-tartiblash-order","title":"2.3.3 Tartiblash - Order","text":"<p>Avval global darajada berib qo'yamizsettings.py</p> <pre><code>REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 2,\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend',\n                                'rest_framework.filters.SearchFilter',\n                                'rest_framework.filters.OrderingFilter']\n}\n</code></pre> <p>Natijada bizda APIlarda tartiblash imkoni mavjud bo'ladi</p> <p></p> <p> Agar alohida ko'rsatmoqchi bo'lsak, u holda ordering_fields hususiyatida ko'rsatamiz</p> <ol> <li>Kitoblarni nomi bo'yicha tartiblab bering</li> </ol> <p>product/views.py</p> <pre><code># ...\n\nclass BookListView(generics.ListCreateAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    filterset_fields = ['title']\n    search_fields = ['title']\n    ordering_fields = ['title']\n\n# ...\n</code></pre> <p>Natija:   Teskari tartiblash  </p>"},{"location":"10_serializer/#24-havfsizlik-security","title":"2.4 Havfsizlik - security","text":""},{"location":"10_serializer/#3-amaliyot-oquvchi","title":"3. Amaliyot. O'quvchi","text":"<p>Quyida portfolio bo'yicha vazifalar keltirilgan:</p> <ol> <li>users/ API da foydalnuvchi va unga tegishli hamma loyihalar chiqsin</li> <li>users_received_message/ API da foydalnuvchi va unga tegishli hamma unga yuborilgan habarlar chiqsin</li> <li>users_sent_message/ API da foydalnuvchi va unga tegishli hamma u yuborgan habarlar chiqsin</li> <li>project_review/ API da loyiha va unga berilgan hamma izohlar chiqsin</li> <li>posrtfolio loyihasidagi hamma APIlar pagination bilan chiqsin</li> <li>Faqatgin loyihalar APIsida sahifadagi loyihalar soni ko'rsatish imkoni bo'lsin</li> <li>Habarlar APIsida bitta sahifadagi habarlar soni global page_size dan farqli bo'lsin</li> <li>Loyihalarni nomi orqali qidirish imkoni bo'lsin</li> <li>Habarlarni nomi va kontenti orqali qidirish imkoni bo'lsin</li> <li>Loyihalar nomi bo'yicha tartiblash imkomi bo'lsin</li> <li>Foydalanuvchilar nomi bo'yicha tartiblash imkomi bo'lsin</li> </ol>"},{"location":"11_deploy/","title":"Mavzu 10: Deploy","text":""},{"location":"11_deploy/#reja","title":"Reja:","text":"<ol> <li>Bilim</li> <li>1.1 Terminlar</li> <li>1.2 O'qish uchun materiallar</li> <li>Amaliyot. O'qituvchi</li> <li>Amaliyot. O'quvchi</li> </ol>"},{"location":"11_deploy/#1-bilim","title":"1. Bilim","text":""},{"location":"11_deploy/#11-terminlar","title":"1.1 Terminlar","text":""},{"location":"11_deploy/#2-amaliyot-oqituvchi","title":"2. Amaliyot. O'qituvchi","text":"<p>Reja:</p> <ul> <li>2.1 Kutubhonalar</li> <li>2.1.1 Swagger</li> <li>2.1.2 CORS</li> <li>2.1.3 whitenoise</li> <li>2.1.4 environ. debug, static, media sozlamalari</li> <li>2.2 github</li> <li>2.3 ahost</li> <li>2.3.1 domen va hosting</li> <li>2.3.2 virtual muhit</li> <li>2.3.3 Kutubhonalarni o'rnatish</li> <li>2.3.4 media, .env, db.sqlite</li> <li>2.3.5 collectstatic</li> <li>2.3.6 ModSec</li> <li>2.3.7 Test. Postman</li> </ul>"},{"location":"11_deploy/#21-kutubhonalar","title":"2.1 Kutubhonalar","text":"<p>Agar API larni qisman bo'lsa ham yozib bo'lgan bo'lsangiz, unda serverga o'rnatishga kirishamiz</p>"},{"location":"11_deploy/#211-swagger","title":"2.1.1 Swagger","text":"<p>Swagger - api hujjatlarini hosil qilib beradigan kutubhona. Front-end dasturchilarga juda kerakli hujjat. Uni o'rnatish uchun quyidagi qadamlarni amalga oshiramiz</p> <ol> <li>Kutubhonani o'rnatish</li> </ol> <pre><code>&gt;&gt;&gt; pip install -U drf-yasg\n</code></pre> <ol> <li>Ro'yxatdan o'tkazish</li> </ol> <p>settings.py</p> <pre><code>INSTALLED_APPS = [\n   ...\n   'drf_yasg',\n   ...\n]\n</code></pre> <ol> <li>Marshrutni ko'rsatish</li> </ol> <p>urls.py</p> <pre><code>from django.contrib import admin\nfrom django.urls import path, include, re_path\nfrom rest_framework import permissions\nfrom drf_yasg.views import get_schema_view\nfrom drf_yasg import openapi\n\nschema_view = get_schema_view(\n   openapi.Info(\n      title=\"Snippets API\",\n      default_version='v1',\n      description=\"Test description\",\n      terms_of_service=\"https://www.google.com/policies/terms/\",\n      contact=openapi.Contact(email=\"contact@snippets.local\"),\n      license=openapi.License(name=\"BSD License\"),\n   ),\n   public=True,\n   permission_classes=[permissions.AllowAny],\n)\n\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('projects.urls')),\n    re_path(r'^swagger(?P&lt;format&gt;\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    re_path(r'^swagger/$', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    re_path(r'^redoc/$', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]\n</code></pre> <p>Ishga tushiramiz, natijada http://127.0.0.1:8000/swagger/ URLda API hujjatlarini ko'ramiz:</p> <p></p> <p>Endi bu havolani front-end dasturchiga berib bemalol birga ishlasa bo'ladi )</p>"},{"location":"11_deploy/#212-cors","title":"2.1.2 CORS","text":"<p>Ta'rifi: Cross-Origin Resource Sharing (CORS) HTTP sarlavhasiga asoslangan mexanizm bo\u02bblib, serverga o\u02bbzidan boshqa har qanday manbalarni (domen, sxema yoki port) ko\u02bbrsatishga imkon beradi, undan brauzer resurslarni yuklashga ruxsat beradi.</p> <p>Brauzerdan APIlardan foydalanishda quyidagi xatoliklar paydo bo'ladi:</p> <p></p> <p>Uni oldini olish uchun django-cors-headers kutubhonasini o'rnatamiz. django-cors-headers - Bu kutubhona Cross-Origin Resource Sharing (CORS) header larini Response ga qo'shib beradi. Bu boshqa manbalardan Django ilovangizga brauzer ichidagi so\u02bbrovlarni amalga oshirish imkonini beradi.</p> <ol> <li>Kutubhonani o'rnatish</li> </ol> <pre><code>&gt;&gt;&gt; python -m pip install django-cors-headers\n</code></pre> <ol> <li>Ro'yxatdan o'tkazish</li> </ol> <pre><code>INSTALLED_APPS = [\n    ...,\n    'corsheaders',\n    ...,\n]\n</code></pre> <ol> <li>Middleware ga qo'shish</li> </ol> <pre><code>MIDDLEWARE = [\n    ...,\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    ...,\n]\n</code></pre> <ol> <li>Hamma IPlarga ruhsat berish. Bu havfsiz emas, lekin boshlanishiga shunday qilishingiz mumkin. To'liqroq ma'lumot bu yerda</li> </ol> <p>settings.py</p> <pre><code>CORS_ALLOW_ALL_ORIGINS = True\n</code></pre>"},{"location":"11_deploy/#213-whitenoise","title":"2.1.3 whitenoise","text":"<p>whitenoise - Ikki qatorli konfiguratsiya bilan veb-ilovangizga o'zining statik fayllariga xizmat ko'rsatishga imkon beradi, bu esa uni nginx, Amazon S3 yoki boshqa har qanday tashqi xizmatga tayanmasdan istalgan joyda o'rnatish mumkin bo'lgan mustaqil qurilmaga aylantiradi. (Ayniqsa, Heroku, OpenShift va boshqa PaaS provayderlarida foydali.)</p> <ol> <li>Kutubhonani o'rnatish</li> </ol> <pre><code>&gt;&gt;&gt; pip install whitenoise\n</code></pre> <ol> <li>Ro'yxatdan o'tkazish</li> </ol> <pre><code>INSTALLED_APPS = [\n    'whitenoise.runserver_nostatic',\n    'django.contrib.admin',\n    ...\n]\n</code></pre> <ol> <li>Middleware ga qo'shish</li> </ol> <pre><code>MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n\n    ...\n]\n</code></pre>"},{"location":"11_deploy/#214-environ-debug-static-media-sozlamalari","title":"2.1.4 environ. debug, static, media sozlamalari","text":"<p>Ba'zi maxfiy fayllarni berkitish uchun o'zgaruvchilarni saqlab turadigan alohida fayldan foydalanish kerak bo'ladi. django-environ kutubhonasi shu maqsadda foydalaniladi, undan tashqari o'zgaruvchi ikki hil qiymat qabul qilishi mumkin bo'lganda ham bu kutubhonadan foydalanish mumkin</p> <ol> <li>Kutubhonani o'rnatish</li> </ol> <pre><code>&gt;&gt;&gt; pip install django-environ\n</code></pre> <ol> <li>Sozlashlar</li> </ol> <pre><code>import environ\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nenv = environ.Env(\n    DEBUG=(bool, True),\n    STATIC_ROOT=(str, os.path.join(BASE_DIR, 'static')),\n    MEDIA_ROOT=(str, os.path.join(BASE_DIR, 'media'))\n)\nenviron.Env.read_env()\n\nSECRET_KEY = env('SECRET_KEY')\n\nDEBUG = env('DEBUG')\n</code></pre> <ol> <li>.env nomli fayl ochamiz. Bu fayl settings.py joylashgan kataloga bo'ladi</li> </ol> <p></p> <p>Bu fayl lokal kompyuterda boshqacha serverda boshqacha bo'ladi</p> <ul> <li>lokal kompyuterdagi .env:</li> </ul> <pre><code>SECRET_KEY=django-insecure-u6wol)l1+50a1*nk2fuse!@cr8b1m8@l_)8g0x6wkkmd4)-3bn\n</code></pre> <ul> <li>serverdagi .env:</li> </ul> <pre><code>SECRET_KEY=django-insecure-u6wol)l1+50a1*nk2fuse!@cr8b1m8@l_)8g0x6wkkmd4)-3bn\nDEBUG=False\nSTATIC_ROOT=/home/dasturc1/dasturchikerak.uz/static/\nMEDIA_ROOT=/home/dasturc1/dasturchikerak.uz/media/\n</code></pre> <p>Bu qiymatlar sizda boshqacha bo'ladi, o'zingizga moslashtirib olasiz DEBUG=True holatda xatolik yuz berganda xatolarni kodlar bilan ko'rsatadi, bu dasturchi uchun kerak, lekin mijoz uchun emas, bularni berkitish uchun DEBUG=False bo'lishi kerak, shuningdek Debug=True holatida hotiradan ko'proq joy egallaydi.</p>"},{"location":"11_deploy/#22-github","title":"2.2 github","text":""},{"location":"11_deploy/#221-gitignore","title":"2.2.1 gitignore","text":"<p>Avval .gitignore fayliga maxfiy bo'lgan (kalitlar) yoki o'zgaruvchan fayllarni (MB) yoki kodga aloqasi bo'lmagan fayllarni (virtual muhit) qo'shib qo'yamiz</p> <p>.gitignore</p> <pre><code>...\n\ndb.sqlite\nvirtual\nmedia\n.env\nstatic\n\n...\n</code></pre>"},{"location":"11_deploy/#221-gitignore_1","title":"2.2.1 gitignore","text":""},{"location":"11_deploy/#222-github","title":"2.2.2 github","text":"<p>Endi github yuklaymiz.</p> <ol> <li>Repozitoriy ochamiz</li> </ol> <p></p> <ol> <li>Nom beramiz</li> </ol> <p></p> <ol> <li>Tugmani bosamiz</li> </ol> <p></p> <ol> <li>Lokal kompyuterimizda terminal orqali loyiha joylashgan katalogga o'tamiz. Son'g quyidagi buyruqlarni yozamiz</li> </ol> <pre><code>&gt;&gt;&gt; git init\n&gt;&gt;&gt; git add .\n&gt;&gt;&gt; git config user.name \"Ismingiz\"\n&gt;&gt;&gt; git config user.email \"pochta@gmail.com\"\n&gt;&gt;&gt; git commit -m \"init\"\n&gt;&gt;&gt; git remote add origin https://github.com/Oybeklinux/dasturchikerak.git\n&gt;&gt;&gt;  git push --set-upstream origin master\n</code></pre> <p>Natijada loyihamiz githubga yuklanadi:</p> <p></p>"},{"location":"11_deploy/#23-ahost","title":"2.3 ahost","text":"<p>ahost - bu hosting, shuningdek domen sotib olish ham mumkin Loyihamizni serverga joylashtirish uhcun ahost misolida ko'ramiz. Avval quyidagi havola orqali ro'yxatdan o'tamiz</p> <p></p> <p>Ro'yxtdan o'tgach shaxsiy kabinetga login qilamiz</p> <p></p>"},{"location":"11_deploy/#231-domen-va-hosting","title":"2.3.1 domen va hosting","text":"<p>Hosting tanlash uchun quyidagi havolani bosamiz, so'ng tariflardan birini tanlaymiz. 500MB joy ham yetarli bo'ladi. 1GB bo'lsa undan ham yaxshi )</p> <p></p> <p>So'ng yangi nom beramiz, ya'ni domen nomini yozamiz, so'ng tekshiramiz, agar bo'sh bo'lsa, unda keyingi sahifaga o'tish tugmasini bosamiz</p> <p></p> <p>Bizga narini chiqarib beradi. Keyingi sahifaga o'tib, to'lovni amalga ishiramiz. 1 kungacha bizga domendan foydalanishga ruhsat keladi. </p>"},{"location":"11_deploy/#232-virtual-muhit","title":"2.3.2 virtual muhit","text":"<p>Ruhsat berilgandan keyin qayta login qilamiz. Quyidagi menyuni tanlab, '\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435' tugmasini bosamiz.</p> <p></p> <p>\"\u0412\u0445\u043e\u0434 \u0432 cPanel\" tugmasini bosamiz</p> <p></p> <p>Bu yerdan 3 menyuni ochib qo'yamiz</p> <ol> <li>\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0444\u0430\u0439\u043b\u043e\u0432</li> <li>Python</li> <li>Terminal</li> </ol> <p></p> <p>Endi Python ga o'tib yangi virtual muhit ochamiz:</p> <ol> <li>Python versiyasini tanlaymiz</li> <li>Virtual muhitga nom beramiz.(Rasmda dasturchikerak.uz nomi berilgan)</li> <li>Log yozuvlari yoziladigan yo'lni va fayl nomini yozamiz (shart emas)</li> <li>\"\u0421\u041e\u0417\u0414\u0410\u0422\u042c\" tugmasini bosamiz</li> </ol> <p>Natijada yangi virtual muhit paydo bo'ladi.</p> <p></p> <p>Loyihada biron kod o'zgarsa, kuchga kirish uchun uni yuqoridagi rasmda ko'rsatilganidek yangilash tugmasini bosish kerak bo'ladi.</p> <p></p> <p>Endi terminalda virtual muhitni ishga tushirish uchun uni yo'lini ko'chirib olish kerak. Uning uchun quyidagilarni amalga ochiramiz:</p> <ol> <li>Qalamcha belgini bosamiz</li> </ol> <p></p> <ol> <li>So'ng virtual muhitni ustiga borib, sichqoncha bilan bossak, uni yo'li buferga ko'chiriladi</li> </ol> <p></p> <p>Agar brouzerga domenni nomini kiritsangiz. Python haqida habarni ko'rasiz, bu degani birinchi bo'lib loyiha kalatogidagi (ya'ni dasturchikerak.uz) passenger_wsgi.py faylini ishga tushiradi. Keyinroq biz bu faylga django loyihani ishga tushiradigan qilib o'zgartiramiz</p> <ol> <li>Terminalga tashlab, ENTER ni bosamiz</li> </ol> <p></p>"},{"location":"11_deploy/#loyihani-kochirish","title":"loyihani ko'chirish","text":"<ol> <li>Endi loyihani ko'chirish uhcun avval uni yo'lini ko'chirib olamiz</li> </ol> <ol> <li>So'ng quyidagi buyruqni yozib, buferdagini tashlab ENTER ni bosamiz (siz o'zingizni loyihangizni yozasiz):</li> </ol> <pre><code>&gt;&gt;&gt; git clone https://github.com/Oybeklinux/student-portfolio.git\n</code></pre> <p>Natijada loyiha ko'chiriladi</p> <p></p> <ol> <li> <p>Buyruqlar bilan tanishamiz:</p> </li> <li> <p>ls - fayl va kataloglarni ko'rsatadi</p> </li> <li>cd .. - bitta tepaga chiqadi</li> <li>cd temp - temp katalogiga o'tadi</li> <li>mkdir - yangi katalog ochadi</li> <li>pwd - qayerdaligini chiqaradi</li> <li>ls -lah - hamma narsani ko'rsatadi, berkitilganlarini ham</li> <li>mv temp temp1 - temp katalogini nomini temp1 ga o'zgartirish</li> <li>mc - midnight comander dasturi (Total comander ga o'xshaydi)</li> <li>cat passenger_wsgi.py - passenger_wsgi.py ichini ko'rsatadi</li> <li>nano passenger_wsgi.py - passenger_wsgi.py faylini o'zgartirish uchun nano dasturini ochib beradi</li> <li>F2 - saqlash uchun</li> <li>F10 - chiqish uchun</li> <li>F5 - ko'chirish uchun</li> <li> <p>F6 ko'chirib o'tkazish uchun</p> </li> <li> <p>Buyruqlar bilan tanishib o'tgan bo'lsak, endi hozirgina clone qilgan loyihani katalog ichidagilarini tashqariga ko'chirib o'tamiz, ya'ni manage.py faylimiz to'g'ridan to'g'ri dasturchikerak.uz ichida bo'lishi kerak. Buning uchun quyidagilarni amalga oshiring:</p> </li> <li>mc ni yozib ENTER ni bosamiz.</li> <li>So'ng oynani chap tarafidan loyiha katalogiga kirib hamma faylni belgilang (klaviaturadagi insert bilan)</li> </ol> <p></p> <ul> <li>F6 ni bosing. O'ng tarafga ko'chirib o'tadi</li> <li>Bo'sh katalogni o'chirib tashlang, agar bo'lsa</li> </ul> <p></p>"},{"location":"11_deploy/#233-kutubhonalarni-ornatish","title":"2.3.3 Kutubhonalarni o'rnatish","text":"<p>Kutubhonalarni o'rnatish uchun quyidagi buyruqni yozamiz.</p> <pre><code>&gt;&gt;&gt; pip install -r requirements.txt\n</code></pre> <p>Agar loyihangizda requirements.txt bo'lmasa, lokalga o'tib unda quyidagilarni bajaring</p> <pre><code>&gt;&gt;&gt; pip freeze &gt; requirements.txt\n&gt;&gt;&gt; git add .\n&gt;&gt;&gt; git commit -m \"requirement qo'shildi\"\n&gt;&gt;&gt; git push\n</code></pre> <p>Serverga o'tib :</p> <pre><code>&gt;&gt;&gt; git pull\n</code></pre> <p>Mana endi yuqoridagi buyruqni yozing:</p> <pre><code>&gt;&gt;&gt; pip install -r requirements.txt\n</code></pre>"},{"location":"11_deploy/#234-media-env-dbsqlite","title":"2.3.4 media, .env, db.sqlite","text":"<p>Bazani ko'chirib o'tish mumkin yoki shunchaki migrate buyrug'ini yozsangiz, yangi baza ochib beradi. Qaysi biri qulay bo'lsa shuni qo'llaysiz. (Bu yerda ko'rsatilgan bazani ko'chirish faqat SQLite uchun)  .gitignore ga kiritilgan fayllarni ahost ga o'tkazish uhcun avval ularni quyidagilarni amalga oshiramiz </p> <ol> <li>Fayllarni ziplab olamiz        Fayl joylash katalogga o'tamiz</li> </ol> <p></p> <p>Alohida files degan katalog ochib hamma kerakli fayl va kataloglarni unga ko'chiramiz</p> <p></p> <p>So'ng ziplaymiz</p> <p></p> <ol> <li>files.zip ni ahostga o'tkazamiz (files katalogi o'chirib tashlashingiz mumkin)    </li> </ol> <p>Loyiha joylashgan katalogga kirib, \"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c\" ni bosib, files.zip faylni ko'rsatamiz</p> <p></p> <p></p> <p></p> <p>Keyin files.zip ni zipdan chiqarib, fayl va kataloglarni mc orqali joy-joyiga qo'yamiz, huddi loyihada joylashganidek. files va files.zip ni o'chirib tashlasa ham bo'ladi  Natija quyidagicha bo'ladi:</p> <p></p> <p>.env ni ahostga ko'chirib bo'lgach, lokal kompyuterdagi .env ichidagi, DEBUG, STATIC_ROOT, MEDIA_ROOT o'zgaruvchilarini o'chiramiz, bu sozlamalar serverga hos edi, lokal uchun settings.py da berilgan</p>"},{"location":"11_deploy/#235-collectstatic","title":"2.3.5 collectstatic","text":"<p>Endi statik fayllarni hosil qilamiz:</p> <pre><code>&gt;&gt;&gt; python manage.py collectstatic\n</code></pre> <p>Endi http://dasturchkerak.uz domenga kirib tekshirib ko'ramzi:</p> <p></p> <p>http://dasturchkerak.uz/api/ ga kiramiz:</p> <p></p>"},{"location":"11_deploy/#236-modsec","title":"2.3.6 ModSec","text":"<p>O'chirish, o'zgartirish funksiyalari ishlamayotgan bo'lsa, cPanel da ModSecure bo'limiga kirib ruhsat berib qo'yamiz:</p> <p></p> <p>\"\u0412\u044b\u043a\u043b.\" tugamsini bosing, natijada quyidagi holatda bo'ladi:</p> <p></p>"},{"location":"11_deploy/#237-test-postman","title":"2.3.7 Test. Postman","text":"<p>Endi browzerdan qiymatlar kiritib, o'chirib, o'zgartirib ko'ring. Huddi shu ishni Postman dasturida qiling</p> <p></p> <p>Avval yangi kolleksiya ochib, nom beramiz:</p> <p></p>"},{"location":"11_deploy/#project-api","title":"Project API","text":""},{"location":"11_deploy/#get","title":"GET","text":"<ol> <li>Kolleksiya ichida yangi katalog ochib, project nomini beramiz.</li> </ol> <ol> <li>Request qo'shamiz:</li> </ol> <ol> <li>Havolani va metodni brovzerdagi kabi yozamiz:</li> </ol> <ol> <li>Saqlaymiz</li> </ol> <ol> <li>Send tugmasini bosib test qilamiz. So'ng qalamcha belgisini bosib, list deb yozamiz</li> </ol>"},{"location":"11_deploy/#post","title":"POST","text":"<ol> <li>Request qo'shamiz</li> <li>Metodga POSTni tanlaymiz</li> <li>Kolleksiyaga saqlaymiz</li> <li>Qalamchani bosib \"add\" yozuvini yozamiz</li> <li>Kiritish uchun ma'lumotni GETdan qaytgan natijadan olamiz. So'ng Send tugmasini bosamiz, natijada quyidagicha holat bo'ladi:</li> </ol>"},{"location":"11_deploy/#get_1","title":"GET","text":"<p>Yuqorida hamma obyektlar massivini qaytarishni ko'rdik, bu esa bitta obyektni qaytaradi, buning uchun parametr sifatida id beriladi. Qadamlar GET metodida ko'rsatilgani kabi bo'ladi. Faqat URL o'zgaradi, ya'ni URL da project.id bo'ladi. Qalamchani bosib nomini item ga o'zgartiring:</p> <p></p>"},{"location":"11_deploy/#patch","title":"PATCH","text":"<p>PATCH - ixtiyoriy hususiyatni yoki hususiyatlarni o'zgartirish uchun ishlatiladi  Yuqorida ko'rsatilgani kabi yangi so'rov (request) ochasiz, so'ng test qilamiz</p> <p></p>"},{"location":"11_deploy/#put","title":"PUT","text":"<p>PUT ham o'zgartirish uchun ishlatiladi, lekin uni PATCH metodidan farqi shuki, unda majburiy hususiyatlarni hammasini berish shart. Masalan title majburiy, shuning uchun usiz bu metoddan foydalana olmaymiz:</p> <p></p>"},{"location":"11_deploy/#delete","title":"DELETE","text":"<p>DELETE - o'chirish uhcun</p> <p>Yuqoridagi kabi yangi so'rov ochib, test qilamiz:</p> <p></p> <p>Muvaffaqiyatli o'chirilsa, status = 204 bo'ladi, aks holda status = 404 (Not found) bo'ladi</p>"},{"location":"11_deploy/#3-amaliyot-oquvchi","title":"3. Amaliyot. O'quvchi","text":"<ol> <li> <p>Shunday qilib biz project modeli uchun hamma CRUD amallarini yozib chiqdik. Postman kelajakda ko'p kerak bo'ladi. Endi quyidagi modellar uchun o'zingiz qilib chiqing:</p> </li> <li> <p>Review</p> </li> <li>Message</li> <li>Tag</li> <li>Profile</li> <li> <p>Skill</p> </li> <li> <p>Yuqoridagi hamma amallarni yakuniy loyihangiz uchun qo'llang</p> </li> </ol>"},{"location":"12_auth/","title":"Mavzu 11: Autentifikatsiya va avtorizatsiya","text":""},{"location":"12_auth/#reja","title":"Reja:","text":"<ol> <li>Bilim</li> <li>1.1 Terminlar</li> <li>1.2 O'qish uchun materiallar</li> <li>Amaliyot. O'qituvchi</li> <li>Amaliyot. O'quvchi</li> </ol>"},{"location":"12_auth/#1-bilim","title":"1. Bilim","text":""},{"location":"12_auth/#11-terminlar","title":"1.1 Terminlar","text":""},{"location":"12_auth/#2-amaliyot-oqituvchi","title":"2. Amaliyot. O'qituvchi","text":"<p>Reja:</p> <ul> <li>[2.1 Tushunchalar]</li> <li>[2.1.1 Identifikatsiya]</li> <li>[2.1.2 Autentifikatsiya]</li> <li>[2.1.3 Avtorizatsiya]</li> <li>[2.2 Oddiy autentifikatsiya]</li> <li> <p>[2.3 Tokenli autentifikatsiya]</p> </li> <li> <p>[2.4 Login, logout, register]</p> </li> </ul>"},{"location":"12_auth/#3-amaliyot-oquvchi","title":"3. Amaliyot. O'quvchi","text":""},{"location":"12_auth/#21-tushunchalar","title":"2.1 Tushunchalar","text":"<p>Video</p>"},{"location":"12_auth/#211-identifikatsiya","title":"2.1.1 Identifikatsiya","text":"<p>Identifikatsiya - shaxsingizni tasdiqlovchi ma'lumotlarni taqdim qilish jarayoni. Masalan ism, familiya, login, parol, ERI, barmoq izi, ko'z, yuz shakli, ID karta va hak</p> <p></p>"},{"location":"12_auth/#212-autentifikatsiya","title":"2.1.2 Autentifikatsiya","text":"<p>Autentifikatsiya - shaxsingizni tasdiqlovchi ma'lumotlarni haqiqiylikka tekshirish jarayoni</p> <p></p>"},{"location":"12_auth/#213-avtorizatsiya","title":"2.1.3 Avtorizatsiya","text":"<p>Avtorizatsiya - foydalanuvchi roliga qarab tegishli sahifalardan tegishli amallar bilan foydalnishga ruhsat berish jarayonidir Tegishli sahifalarga mahsulotlar sahifasi, admin panel, login sahifasi, buyurtma berish sahifalari kiradi   Tegishli amallarga kiritish, o'qish, o'chirish, o'zgartirish amallari kiradi</p> <p></p> <p>Oddiy qilib tushuntirganda siz biron tashkilotga kirmoqchisiz. Jarayon tahminan mana bunday bo'ladi:</p> <p></p>"},{"location":"12_auth/#22-oddiy-autentifikatsiya","title":"2.2 Oddiy autentifikatsiya","text":"<p>Qadam - 1.</p> <p>Authentifikiatsiyani API hamma turlarida qanday ishlatilishini tushunib olish uchun avval bitta vazifani bajaradigan 5 xil ko'rinishdagi API yasaymiz, hammasi loyihalar ro'yxatini qaytaradi.</p> <p>projects/views.py</p> <pre><code># api_view\nfrom .serializers import *\nfrom rest_framework import viewsets, mixins, generics\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\n# ...\n\n@api_view(['GET'])\ndef get_projects(request):\n    print(request.user)\n    projects = Project.objects.all().order_by('-vote_count')\n    serializer = ProjectSerializer(projects, many=True)\n    return Response(serializer.data)\n\n\n# APIVIEW\nclass ProjectAPIView(APIView):\n\n    def get(self, request):\n        projects = Project.objects.all()\n        serializer = ProjectSerializer(projects, many=True)\n        return Response(serializer.data)\n\n\n# Mixin\nclass ProjectMixin(mixins.ListModelMixin, generics.GenericAPIView):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n\n    def get(self, request):\n        return self.list(request)\n\n\n# Generic view\nclass ProjectGeneric(generics.ListCreateAPIView):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n\n\n# ViewSet\nclass ProjectViewSet(viewsets.ModelViewSet):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n</code></pre> <p>Marshrutini ko'rsatamiz</p> <p>projects/urls.py</p> <pre><code>from django.urls import path, include\nfrom .views import *\nfrom rest_framework.routers import DefaultRouter\n\nrouter = DefaultRouter()\nrouter.register('project_viewset/', ProjectViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n    path('project_function/', get_projects),\n    path('project_apiview/', ProjectAPIView.as_view()),\n    path('project_mixin/', ProjectMixin.as_view()),\n    path('project_generic/', ProjectGeneric.as_view()),\n]\n</code></pre> <p>Hammasini Postmandan ishga tushiramiz</p> <p></p> <p>Endi bu APIni faqat ro'yxatdan o'tganlar (autentifikatsiyadan o'tgan) uchun chegaralaymiz Autentifikatsiyani bir necha hillari bor. Eng oddiysi parol va loginga asoslanadi. Hozir shuni ko'rib o'tamiz.</p> <p>Qadam - 2.</p> <p>Autentifikatsiya turini global o'rnatish uchun setting.py fayliga quyidagi kodlarni yozamiz:</p> <pre><code>REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ]\n}\n</code></pre> <p>Endi API lar uchun sozlashlarni amalga oshiramiz</p> <pre><code># api_view\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef get_projects(request):\n    print(request.user)\n    projects = Project.objects.all().order_by('-vote_count')\n    serializer = ProjectSerializer(projects, many=True)\n    return Response(serializer.data)\n</code></pre> <p>Izoh:</p> <ul> <li>@permission_classes([IsAuthenticated]) - agar autentifikatsiyadan o'tgan bo'lsagina bu APIdan faydalanishga ruxsat bor degani</li> </ul> <p>Endi Postmanda sinab ko'ramiz</p> <p>Autentifikatsiya kerakli ma'lumotlar taqdim qilinmagan degan habar chiqdi. Endi bu APIdan foydalanish uchun parol va login bilan foydalanishimiz kerak bo'ladi</p> <p></p> <p>Qolgan 4 ta APIlarda ham parol login bilan foydalanishni talab qilmoqchi bo'lsak class ga permission_classes = [IsAuthenticated] kodini yozamiz:</p> <pre><code>from .serializers import *\nfrom rest_framework import viewsets, mixins, generics\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\n# ...\n\n# APIVIEW\nclass ProjectAPIView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        projects = Project.objects.all()\n        serializer = ProjectSerializer(projects, many=True)\n        return Response(serializer.data)\n\n\n# Mixin\nclass ProjectMixin(mixins.ListModelMixin, generics.GenericAPIView):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        return self.list(request)\n\n\n# Generic view\nclass ProjectGeneric(generics.ListCreateAPIView):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n    permission_classes = [IsAuthenticated]\n\n\n# ViewSet\nclass ProjectViewSet(viewsets.ModelViewSet):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n    permission_classes = [IsAuthenticated]\n</code></pre> <p></p> <p>Parol loginlarni taqdim qilamiz:</p> <p></p>"},{"location":"12_auth/#23-tokenli-autentifikatsiya","title":"2.3 Tokenli autentifikatsiya","text":"<p>Hozir Simple JWT nomli kutubhonani ko'rib o'tamiz.  JWT - JSON Web Token. DRF uchun mo'ljallangan authentifikatsiya kutubhonasi  JWT haqida hujjat  Endi Autentifikatsiyani ikkinchi turii bo'lgan Token bilan tanishamiz. Bu yerda login va parol o'rnida token ishlatiladi. Bu oldingisiga nisbatan havfsiz hisoblanadi, chunkki token o'zgaritirb turish mumkin, va parol login ochiq bo'lmaydi. </p> <p>Qadam-1</p> <p>Buning uchun avval quyidagi buyruq bilan kutubhonani o'rnatib olamiz:</p> <pre><code>&gt;&gt;&gt; pip install djangorestframework-simplejwt\n</code></pre> <p>Qadam-2</p> <p>Ruxsat berish (permission) va autentifikatsiya (authentification) turlarini ko'rsatish. Oddiy autentifikatsiyani global qilib o'rnatgandik, keling bunisini tegishli klassga beramiz. Masalan ViewSet klasiga beramiz:</p> <p>projects/views/py</p> <pre><code># ...\nfrom rest_framework_simplejwt.authentication import JWTAuthentication\n\n# ...\n\n# ViewSet\nclass ProjectViewSet(viewsets.ModelViewSet):\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n    permission_classes = [IsAuthenticated]\n    authentication_classes = [JWTAuthentication]\n</code></pre> <p>Endi Postmandan parol login bersak ham ishlamaydi</p> <p></p> <p>Sababi endi autentifikatsiya sifatida token bilan berish kerak</p> <p></p> <p>Tokenni olish uchun bir marta parol login taqdim qilinadi, keyin esa autentifikatsiya uchun faqat token ishlatiladi. Token orqali server foydalanuvchini tanib oladi. Endi token olish jarayonini ko'ramiz</p>"},{"location":"12_auth/#login","title":"login","text":"<p>urls.py</p> <pre><code># ...\nfrom rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n)\n\n# ...\n\nurlpatterns = [\n    # ...\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    # ...\n]\n</code></pre> <p>JWT sahifasida settings menyusiga kirib sozlamalarni ko'chirib olamiz, so'ng ba'zilarini o'zimiga moslashtirib olamiz:</p> <p>settings.py</p> <pre><code># ...\n\nINSTALLED_APPS = [\n    # ...\n    'rest_framework_simplejwt',\n    # ...\n]\n#\nfrom datetime import timedelta\n# ...\n\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': False,\n    'UPDATE_LAST_LOGIN': False,\n\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,\n    'ISSUER': None,\n    'JWK_URL': None,\n    'LEEWAY': 0,\n\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',\n\n    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),\n    'TOKEN_TYPE_CLAIM': 'token_type',\n    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',\n\n    'JTI_CLAIM': 'jti',\n\n    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\n    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\n}\n</code></pre> <p>Izoh:</p> <ul> <li>ACCESS_TOKEN_LIFETIME - token ishlash muddati</li> <li>REFRESH_TOKEN_LIFETIME - token islash muddati tugaganda yangilash uchun token muddati</li> </ul> <p>Ishga tushiramiz, so'ng Postmanda tekshiramiz.</p> <p></p> <p>Endi /api/project_viewset/ APIga qaytamiz, bu API da biz parol login emas, hozirgina qo'lga kiritan tokenni kiritamiz:</p> <p></p> <p>Eslatma Tokendan oldin Bearer so'zini qo'shib ketamiz.</p>"},{"location":"12_auth/#24-login-logout-register","title":"2.4 Login, logout, register","text":"<p>Qadam - 1</p> <p>settings.py</p> <pre><code># ...\n\n\nINSTALLED_APPS = [\n    # ...\n    'rest_framework',\n    'rest_framework.authtoken',\n    'django_filters',\n    # ...\n]\n# ...\n\nREST_FRAMEWORK = {\n\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.AllowAny',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',  # &lt;-- And here\n    ],\n}\n</code></pre> <pre><code>&gt;&gt;&gt; python manage.py makemigrations\n</code></pre> <p>Qadam - 2</p> <p>users/urls.py</p> <pre><code>urlpatterns = [\n    # ...\n    path('login/', login_user),\n    path('logout/', logout_user),\n    path('register/', register_user)\n]\n</code></pre> <p>Qadam - 3</p> <p>users/views.py</p> <pre><code>from django.contrib.auth import authenticate, login, logout\nfrom rest_framework import viewsets, status\nfrom rest_framework.authtoken.models import Token\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n\n# ...\n\n@api_view([\"GET\"])\ndef logout_user(request):\n    request.user.auth_token.delete()\n    logout(request)\n    return Response('User Logged out successfully')\n\n\n@api_view(['POST'])\ndef login_user(request):\n    data = request.data\n    print(data)\n    login = data['username']\n    password = data['password']\n\n    if not login:\n        return Response({\n            'status': status.HTTP_400_BAD_REQUEST,\n            'message': 'Login talab etiladi'\n        })\n    if not password:\n        return Response({\n            'status': status.HTTP_400_BAD_REQUEST,\n            'message': 'Parol talab etiladi'\n        })\n\n    user = authenticate(username=login, password=password)\n    print(user)\n    if not user:\n        return Response({\n            'status': status.HTTP_400_BAD_REQUEST,\n            'message': 'bunday foydalanuvchi bazada yo''q'\n        })\n\n    token = Token.objects.get_or_create(user=user)[0].key\n    return Response(\n        {\n            \"token\": token\n        }\n    )\n\n\n@api_view(['POST'])\ndef register_user(request):\n    data = request.data\n\n    login = data['username']\n    password = data['password']\n\n    if not login:\n        return Response({\n            'status': status.HTTP_400_BAD_REQUEST,\n            'message': 'Login talab etiladi'\n        })\n    if not password:\n        return Response({\n            'status': status.HTTP_400_BAD_REQUEST,\n            'message': 'Parol talab etiladi'\n        })\n\n    user = authenticate(username=login, password=password)\n\n    if user:\n        return Response({\n            'status': 400,\n            'message': 'Bu foydalanuvchi bor'\n        })\n\n\n    try:\n        user = User.objects.create(\n            username=login,\n            password=password\n        )\n    except Exception as e:\n        return Response({\n            'status': 400,\n            'message': 'Foydalanuvchi yaratishda xatolik yuz berdi'\n        })\n    token = Token.objects.get_or_create(user=user)[0].key\n    return Response({\n        'message': 'Foydalanuvchi qo''shildi',\n        \"token\": token,\n        \"is_admin\": user.is_staff\n    }, status=status.HTTP_201_CREATED)\n</code></pre>"}]}